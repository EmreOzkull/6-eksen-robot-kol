C L "MAIN" 0 9 1 "FUNCTION"
D G "__PCH__" 0 639 ""5.081""
D G "__DEVICE__" 0 639 "4622"
D G "__DATE__" 0 639 ""4-Jun-23""
D G "__TIME__" 0 639 ""22:29:19""
D G "_UNICODE" 0 639 ""?""
D G "__EVAL" 0 639 ""?"" "Standard Header file for the PIC18F46K22 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 45 ""
v L "value" 1 45 "int8" `55 
f B "set_tris_a" 1 45 "void(int8 value)" `54 
f N "set_tris_b" 1 46 ""
v L "value" 1 46 "int8" `57 
f B "set_tris_b" 1 46 "void(int8 value)" `56 
f N "set_tris_c" 1 47 ""
v L "value" 1 47 "int8" `59 
f B "set_tris_c" 1 47 "void(int8 value)" `58 
f N "set_tris_d" 1 48 ""
v L "value" 1 48 "int8" `61 
f B "set_tris_d" 1 48 "void(int8 value)" `60 
f N "set_tris_e" 1 49 ""
v L "value" 1 49 "int8" `63 
f B "set_tris_e" 1 49 "void(int8 value)" `62 
f N "get_tris_a" 1 50 ""
f B "get_tris_a" 1 50 "int8()" `64 
f N "get_tris_b" 1 51 ""
f B "get_tris_b" 1 51 "int8()" `65 
f N "get_tris_c" 1 52 ""
f B "get_tris_c" 1 52 "int8()" `66 
f N "get_tris_d" 1 53 ""
f B "get_tris_d" 1 53 "int8()" `67 
f N "get_tris_e" 1 54 ""
f B "get_tris_e" 1 54 "int8()" `68 
f N "output_a" 1 55 ""
v L "value" 1 55 "int8" `70 
f B "output_a" 1 55 "void(int8 value)" `69 
f N "output_b" 1 56 ""
v L "value" 1 56 "int8" `72 
f B "output_b" 1 56 "void(int8 value)" `71 
f N "output_c" 1 57 ""
v L "value" 1 57 "int8" `74 
f B "output_c" 1 57 "void(int8 value)" `73 
f N "output_d" 1 58 ""
v L "value" 1 58 "int8" `76 
f B "output_d" 1 58 "void(int8 value)" `75 
f N "output_e" 1 59 ""
v L "value" 1 59 "int8" `78 
f B "output_e" 1 59 "void(int8 value)" `77 
f N "input_a" 1 60 ""
f B "input_a" 1 60 "int8()" `79 
f N "input_b" 1 61 ""
f B "input_b" 1 61 "int8()" `80 
f N "input_c" 1 62 ""
f B "input_c" 1 62 "int8()" `81 
f N "input_d" 1 63 ""
f B "input_d" 1 63 "int8()" `82 
f N "input_e" 1 64 ""
f B "input_e" 1 64 "int8()" `83 
f N "input_change_a" 1 65 ""
f B "input_change_a" 1 65 "int8()" `84 
f N "input_change_b" 1 66 ""
f B "input_change_b" 1 66 "int8()" `85 
f N "input_change_c" 1 67 ""
f B "input_change_c" 1 67 "int8()" `86 
f N "input_change_d" 1 68 ""
f B "input_change_d" 1 68 "int8()" `87 
f N "input_change_e" 1 69 ""
f B "input_change_e" 1 69 "int8()" `88 
f N "port_b_pullups" 1 70 ""
v L "upmask" 1 70 "int8" `90 
f B "port_b_pullups" 1 70 "void(int8 upmask)" `89 
f N "port_e_pullups" 1 71 ""
v L "value" 1 71 "int8" `92 
f B "port_e_pullups" 1 71 "void(int8 value)" `91 
f N "set_slow_slew_a" 1 72 ""
v L "value" 1 72 "int8" `94 
f B "set_slow_slew_a" 1 72 "void(int8 value)" `93 
f N "set_slow_slew_b" 1 73 ""
v L "value" 1 73 "int8" `96 
f B "set_slow_slew_b" 1 73 "void(int8 value)" `95 
f N "set_slow_slew_c" 1 74 ""
v L "value" 1 74 "int8" `98 
f B "set_slow_slew_c" 1 74 "void(int8 value)" `97 
f N "set_slow_slew_d" 1 75 ""
v L "value" 1 75 "int8" `100 
f B "set_slow_slew_d" 1 75 "void(int8 value)" `99 
f N "set_slow_slew_e" 1 76 ""
v L "value" 1 76 "int8" `102 
f B "set_slow_slew_e" 1 76 "void(int8 value)" `101 
f N "input" 1 77 ""
v L "pin" 1 77 "int16" `104 
f B "input" 1 77 "int8(int16 pin)" `103 
f N "input_state" 1 78 ""
v L "pin" 1 78 "int16" `106 
f B "input_state" 1 78 "int8(int16 pin)" `105 
f N "output_low" 1 79 ""
v L "pin" 1 79 "int16" `108 
f B "output_low" 1 79 "void(int16 pin)" `107 
f N "output_high" 1 80 ""
v L "pin" 1 80 "int16" `110 
f B "output_high" 1 80 "void(int16 pin)" `109 
f N "output_toggle" 1 81 ""
v L "pin" 1 81 "int16" `112 
f B "output_toggle" 1 81 "void(int16 pin)" `111 
f N "output_bit" 1 82 ""
v L "pin" 1 82 "int16" `114 
v L "level" 1 82 "int8" `115 
f B "output_bit" 1 82 "void(int16 pin,int8 level)" `113 
f N "output_float" 1 83 ""
v L "pin" 1 83 "int16" `117 
f B "output_float" 1 83 "void(int16 pin)" `116 
f N "output_drive" 1 84 ""
v L "pin" 1 84 "int16" `119 
f B "output_drive" 1 84 "void(int16 pin)" `118  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 88 "31744"
d G "PIN_A1" 1 89 "31745"
d G "PIN_A2" 1 90 "31746"
d G "PIN_A3" 1 91 "31747"
d G "PIN_A4" 1 92 "31748"
d G "PIN_A5" 1 93 "31749"
d G "PIN_A6" 1 94 "31750"
d G "PIN_A7" 1 95 "31751"
d G "PIN_B0" 1 97 "31752"
d G "PIN_B1" 1 98 "31753"
d G "PIN_B2" 1 99 "31754"
d G "PIN_B3" 1 100 "31755"
d G "PIN_B4" 1 101 "31756"
d G "PIN_B5" 1 102 "31757"
d G "PIN_B6" 1 103 "31758"
d G "PIN_B7" 1 104 "31759"
d G "PIN_C0" 1 106 "31760"
d G "PIN_C1" 1 107 "31761"
d G "PIN_C2" 1 108 "31762"
d G "PIN_C3" 1 109 "31763"
d G "PIN_C4" 1 110 "31764"
d G "PIN_C5" 1 111 "31765"
d G "PIN_C6" 1 112 "31766"
d G "PIN_C7" 1 113 "31767"
d G "PIN_D0" 1 115 "31768"
d G "PIN_D1" 1 116 "31769"
d G "PIN_D2" 1 117 "31770"
d G "PIN_D3" 1 118 "31771"
d G "PIN_D4" 1 119 "31772"
d G "PIN_D5" 1 120 "31773"
d G "PIN_D6" 1 121 "31774"
d G "PIN_D7" 1 122 "31775"
d G "PIN_E0" 1 124 "31776"
d G "PIN_E1" 1 125 "31777"
d G "PIN_E2" 1 126 "31778"
d G "PIN_E3" 1 127 "31779"
d G "FALSE" 1 130 "0"
d G "TRUE" 1 131 "1"
d G "BYTE" 1 133 "int8"
d G "BOOLEAN" 1 134 "int1"
d G "getc" 1 136 "getch"
d G "fgetc" 1 137 "getch"
d G "getchar" 1 138 "getch"
d G "putc" 1 139 "putchar"
d G "fputc" 1 140 "putchar"
d G "fgets" 1 141 "gets"
d G "fputs" 1 142 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 147 ""
f B "restart_cause" 1 147 "int8()" `120 
f N "reset_cpu" 1 148 ""
f B "reset_cpu" 1 148 "void()" `121 
f N "sleep" 1 149 ""
f B "sleep" 1 149 "void()" `122 
f N "sleep" 1 150 ""
v L "type" 1 150 "int8" `124 
f B "sleep" 1 150 "void(int8 type)" `123  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 152 "7"
d G "MCLR_FROM_SLEEP" 1 153 "11"
d G "MCLR_FROM_RUN" 1 154 "15"
d G "NORMAL_POWER_UP" 1 155 "12"
d G "BROWNOUT_RESTART" 1 156 "14"
d G "WDT_FROM_SLEEP" 1 157 "3"
d G "RESET_INSTRUCTION" 1 158 "0"
d G "SLEEP_FULL" 1 161 "0" "Default"
d G "SLEEP_IDLE" 1 162 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 169 ""
v L "mode" 1 169 "int8" `126 
f B "setup_timer_0" 1 169 "void(int8 mode)" `125 
f N "set_timer0" 1 170 ""
v L "value" 1 170 "int16" `128 
f B "set_timer0" 1 170 "void(int16 value)" `127 
f N "get_timer0" 1 171 ""
f B "get_timer0" 1 171 "int16()" `129 
f N "setup_counters" 1 172 ""
v L "mode" 1 172 "int8" `131 
v L "prescaler" 1 172 "int8" `132 
f B "setup_counters" 1 172 "void(int8 mode,int8 prescaler)" `130 
f N "set_rtcc" 1 173 ""
v L "value" 1 173 "int16" `134 
f B "set_rtcc" 1 173 "void(int16 value)" `133 
f N "get_rtcc" 1 174 ""
f B "get_rtcc" 1 174 "int16()" `135  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 176 "0"
d G "T0_EXT_L_TO_H" 1 177 "32"
d G "T0_EXT_H_TO_L" 1 178 "48"
d G "T0_DIV_1" 1 180 "8"
d G "T0_DIV_2" 1 181 "0"
d G "T0_DIV_4" 1 182 "1"
d G "T0_DIV_8" 1 183 "2"
d G "T0_DIV_16" 1 184 "3"
d G "T0_DIV_32" 1 185 "4"
d G "T0_DIV_64" 1 186 "5"
d G "T0_DIV_128" 1 187 "6"
d G "T0_DIV_256" 1 188 "7"
d G "T0_OFF" 1 190 "0x80"
d G "T0_8_BIT" 1 192 "0x40"
d G "RTCC_INTERNAL" 1 196 "0"
d G "RTCC_EXT_L_TO_H" 1 197 "32"
d G "RTCC_EXT_H_TO_L" 1 198 "48"
d G "RTCC_DIV_1" 1 199 "8"
d G "RTCC_DIV_2" 1 200 "0"
d G "RTCC_DIV_4" 1 201 "1"
d G "RTCC_DIV_8" 1 202 "2"
d G "RTCC_DIV_16" 1 203 "3"
d G "RTCC_DIV_32" 1 204 "4"
d G "RTCC_DIV_64" 1 205 "5"
d G "RTCC_DIV_128" 1 206 "6"
d G "RTCC_DIV_256" 1 207 "7"
d G "RTCC_OFF" 1 208 "0x80"
d G "RTCC_8_BIT" 1 209 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 220 ""
v L "mode" 1 220 "int16" `137 
f B "setup_wdt" 1 220 "void(int16 mode)" `136 
f N "restart_wdt" 1 221 ""
f B "restart_wdt" 1 221 "void()" `138  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 223 "0x100"
d G "WDT_OFF" 1 224 "0"
d G "WDT_4MS" 1 226 "0x300"
d G "WDT_8MS" 1 227 "0x500"
d G "WDT_16MS" 1 228 "0x700"
d G "WDT_32MS" 1 229 "0x900"
d G "WDT_64MS" 1 230 "0xB00"
d G "WDT_128MS" 1 231 "0xD00"
d G "WDT_256MS" 1 232 "0xF00"
d G "WDT_512MS" 1 233 "0x1100"
d G "WDT_1S" 1 234 "0x1300"
d G "WDT_2S" 1 235 "0x1500"
d G "WDT_4S" 1 236 "0x1700"
d G "WDT_8S" 1 237 "0x1900"
d G "WDT_16S" 1 238 "0x1B00"
d G "WDT_32S" 1 239 "0x1D00"
d G "WDT_64S" 1 240 "0x1F00"
d G "WDT_128S" 1 241 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 246 ""
v L "mode" 1 246 "int16" `140 
f B "setup_timer_1" 1 246 "void(int16 mode)" `139 
f N "get_timer1" 1 247 ""
f B "get_timer1" 1 247 "int16()" `141 
f N "set_timer1" 1 248 ""
v L "value" 1 248 "int16" `143 
f B "set_timer1" 1 248 "void(int16 value)" `142  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 251 "0"
d G "T1_INTERNAL" 1 252 "0x07"
d G "T1_EXTERNAL" 1 253 "0x87"
d G "T1_EXTERNAL_SYNC" 1 254 "0x83"
d G "T1_FOSC" 1 255 "0x47"
d G "T1_ENABLE_SOSC" 1 257 "0x08"
d G "T1_DIV_BY_1" 1 259 "0"
d G "T1_DIV_BY_2" 1 260 "0x10"
d G "T1_DIV_BY_4" 1 261 "0x20"
d G "T1_DIV_BY_8" 1 262 "0x30"
d G "T1_GATE" 1 264 "0x8000"
d G "T1_GATE_INVERTED" 1 265 "0xC000"
d G "T1_GATE_TOGGLE" 1 266 "0xA000"
d G "T1_GATE_SINGLE" 1 267 "0x9000"
d G "T1_GATE_TIMER2" 1 268 "0x8100"
d G "T1_GATE_COMP1" 1 269 "0x8200"
d G "T1_GATE_COMP2" 1 270 "0x8300"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 275 ""
v L "mode" 1 275 "int8" `145 
v L "period" 1 275 "int8" `146 
v L "postscale" 1 275 "int8" `147 
f B "setup_timer_2" 1 275 "void(int8 mode,int8 period,int8 postscale)" `144 
f N "get_timer2" 1 276 ""
f B "get_timer2" 1 276 "int8()" `148 
f N "set_timer2" 1 277 ""
v L "value" 1 277 "int8" `150 
f B "set_timer2" 1 277 "void(int8 value)" `149  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 279 "0"
d G "T2_DIV_BY_1" 1 280 "4"
d G "T2_DIV_BY_4" 1 281 "5"
d G "T2_DIV_BY_16" 1 282 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 287 ""
v L "mode" 1 287 "int16" `152 
f B "setup_timer_3" 1 287 "void(int16 mode)" `151 
f N "get_timer3" 1 288 ""
f B "get_timer3" 1 288 "int16()" `153 
f N "set_timer3" 1 289 ""
v L "value" 1 289 "int16" `155 
f B "set_timer3" 1 289 "void(int16 value)" `154  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 292 "0"
d G "T3_INTERNAL" 1 293 "0x07"
d G "T3_EXTERNAL" 1 294 "0x87"
d G "T3_EXTERNAL_SYNC" 1 295 "0x83"
d G "T3_FOSC" 1 296 "0x47"
d G "T3_ENABLE_SOSC" 1 298 "0x08"
d G "T3_DIV_BY_1" 1 300 "0"
d G "T3_DIV_BY_2" 1 301 "0x10"
d G "T3_DIV_BY_4" 1 302 "0x20"
d G "T3_DIV_BY_8" 1 303 "0x30"
d G "T3_GATE" 1 305 "0x8000"
d G "T3_GATE_INVERTED" 1 306 "0xC000"
d G "T3_GATE_TOGGLE" 1 307 "0xA000"
d G "T3_GATE_SINGLE" 1 308 "0x9000"
d G "T3_GATE_TIMER4" 1 309 "0x8100"
d G "T3_GATE_COMP1" 1 310 "0x8200"
d G "T3_GATE_COMP2" 1 311 "0x8300"
c L "set_timer3" 1 3 3 "FUNCTION"
f N "setup_timer_4" 1 316 ""
v L "mode" 1 316 "int16" `157 
v L "period" 1 316 "int8" `158 
v L "postscaler" 1 316 "int8" `159 
f B "setup_timer_4" 1 316 "void(int16 mode,int8 period,int8 postscaler)" `156 
f N "get_timer4" 1 317 ""
f B "get_timer4" 1 317 "int8()" `160 
f N "set_timer4" 1 318 ""
v L "value" 1 318 "int8" `162 
f B "set_timer4" 1 318 "void(int8 value)" `161  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 320 "0"
d G "T4_DIV_BY_1" 1 321 "4"
d G "T4_DIV_BY_4" 1 322 "5"
d G "T4_DIV_BY_16" 1 323 "6"
c L "set_timer4" 1 3 3 "FUNCTION"
f N "setup_timer_5" 1 328 ""
v L "mode" 1 328 "int16" `164 
f B "setup_timer_5" 1 328 "void(int16 mode)" `163 
f N "get_timer5" 1 329 ""
f B "get_timer5" 1 329 "int16()" `165 
f N "set_timer5" 1 330 ""
v L "value" 1 330 "int16" `167 
f B "set_timer5" 1 330 "void(int16 value)" `166  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 1 333 "0"
d G "T5_INTERNAL" 1 334 "0x07"
d G "T5_EXTERNAL" 1 335 "0x87"
d G "T5_EXTERNAL_SYNC" 1 336 "0x83"
d G "T5_FOSC" 1 337 "0x47"
d G "T5_LFINTRC" 1 338 "0xC7"
d G "T5_ENABLE_SOSC" 1 340 "0x08"
d G "T5_DIV_BY_1" 1 342 "0"
d G "T5_DIV_BY_2" 1 343 "0x10"
d G "T5_DIV_BY_4" 1 344 "0x20"
d G "T5_DIV_BY_8" 1 345 "0x30"
d G "T5_GATE" 1 347 "0x8000"
d G "T5_GATE_INVERTED" 1 348 "0xC000"
d G "T5_GATE_TOGGLE" 1 349 "0xA000"
d G "T5_GATE_SINGLE" 1 350 "0x9000"
d G "T5_GATE_TIMER6" 1 351 "0x8100"
d G "T5_GATE_COMP1" 1 352 "0x8200"
d G "T5_GATE_COMP2" 1 353 "0x8300"
c L "set_timer5" 1 3 3 "FUNCTION"
f N "setup_timer_6" 1 358 ""
v L "mode" 1 358 "int16" `169 
v L "period" 1 358 "int8" `170 
v L "postscaler" 1 358 "int8" `171 
f B "setup_timer_6" 1 358 "void(int16 mode,int8 period,int8 postscaler)" `168 
f N "get_timer6" 1 359 ""
f B "get_timer6" 1 359 "int8()" `172 
f N "set_timer6" 1 360 ""
v L "value" 1 360 "int8" `174 
f B "set_timer6" 1 360 "void(int8 value)" `173  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 363 "0"
d G "T6_DIV_BY_1" 1 364 "4"
d G "T6_DIV_BY_4" 1 365 "5"
d G "T6_DIV_BY_16" 1 366 "6"
c L "set_timer6" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 372 ""
v L "mode" 1 372 "int32" `176 
f B "setup_ccp1" 1 372 "void(int32 mode)" `175 
f N "setup_ccp1" 1 373 ""
v L "mode" 1 373 "int32" `178 
v L "pwm" 1 373 "int8" `179 
f B "setup_ccp1" 1 373 "void(int32 mode,int8 pwm)" `177 
f N "set_pwm1_duty" 1 374 ""
v L "value" 1 374 "int16" `181 
f B "set_pwm1_duty" 1 374 "void(int16 value)" `180  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 376 "0"
d G "CCP_CAPTURE_FE" 1 377 "0x04"
d G "CCP_CAPTURE_RE" 1 378 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 379 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 380 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 381 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 382 "0x09"
d G "CCP_COMPARE_INT" 1 383 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 384 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 385 "0x0B"
d G "CCP_PWM" 1 386 "0x0C"
d G "CCP_PWM_PLUS_1" 1 387 "0x1c"
d G "CCP_PWM_PLUS_2" 1 388 "0x2c"
d G "CCP_PWM_PLUS_3" 1 389 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 1 399 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 1 400 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 1 401 "0x0200"
d G "CCP_PWM_H_H" 1 404 "0x0c"
d G "CCP_PWM_H_L" 1 405 "0x0d"
d G "CCP_PWM_L_H" 1 406 "0x0e"
d G "CCP_PWM_L_L" 1 407 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 409 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 410 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 411 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 413 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 414 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 415 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 416 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 417 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 418 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 419 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 421 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 422 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 423 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 425 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 426 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 427 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 429 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 431 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 432 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 433 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 434 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 435 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 438 ""
v L "mode" 1 438 "int32" `186 
f B "setup_ccp2" 1 438 "void(int32 mode)" `185 
f N "setup_ccp2" 1 439 ""
v L "mode" 1 439 "int32" `188 
v L "pwm" 1 439 "int8" `189 
f B "setup_ccp2" 1 439 "void(int32 mode,int8 pwm)" `187 
f N "set_pwm2_duty" 1 440 ""
v L "value" 1 440 "int16" `191 
f B "set_pwm2_duty" 1 440 "void(int16 value)" `190 
c L "set_pwm2_duty" 1 3 1 "FUNCTION"
f N "setup_ccp3" 1 446 ""
v L "mode" 1 446 "int32" `196 
f B "setup_ccp3" 1 446 "void(int32 mode)" `195 
f N "setup_ccp3" 1 447 ""
v L "mode" 1 447 "int32" `198 
v L "pwm" 1 447 "int8" `199 
f B "setup_ccp3" 1 447 "void(int32 mode,int8 pwm)" `197 
f N "set_pwm3_duty" 1 448 ""
v L "value" 1 448 "int16" `201 
f B "set_pwm3_duty" 1 448 "void(int16 value)" `200 
c L "set_pwm3_duty" 1 3 1 "FUNCTION"
f N "setup_ccp4" 1 454 ""
v L "mode" 1 454 "int32" `206 
f B "setup_ccp4" 1 454 "void(int32 mode)" `205 
f N "setup_ccp4" 1 455 ""
v L "mode" 1 455 "int32" `208 
v L "pwm" 1 455 "int8" `209 
f B "setup_ccp4" 1 455 "void(int32 mode,int8 pwm)" `207 
f N "set_pwm4_duty" 1 456 ""
v L "value" 1 456 "int16" `211 
f B "set_pwm4_duty" 1 456 "void(int16 value)" `210 
c L "set_pwm4_duty" 1 3 1 "FUNCTION"
f N "setup_ccp5" 1 462 ""
v L "mode" 1 462 "int32" `216 
f B "setup_ccp5" 1 462 "void(int32 mode)" `215 
f N "setup_ccp5" 1 463 ""
v L "mode" 1 463 "int32" `218 
v L "pwm" 1 463 "int8" `219 
f B "setup_ccp5" 1 463 "void(int32 mode,int8 pwm)" `217 
f N "set_pwm5_duty" 1 464 ""
v L "value" 1 464 "int16" `221 
f B "set_pwm5_duty" 1 464 "void(int16 value)" `220 
c L "set_pwm5_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 472 ""
v L "mode" 1 472 "int32" `226 
f B "setup_spi" 1 472 "void(int32 mode)" `225 
f N "spi_write" 1 473 ""
v L "value" 1 473 "int8" `228 
f B "spi_write" 1 473 "void(int8 value)" `227 
f N "spi_read" 1 474 ""
f B "spi_read" 1 474 "int8()" `229 
f N "spi_read" 1 475 ""
v L "value" 1 475 "int8" `231 
f B "spi_read" 1 475 "int8(int8 value)" `230 
f N "spi_data_is_in" 1 476 ""
f B "spi_data_is_in" 1 476 "int8()" `232 
f N "setup_spi2" 1 477 ""
v L "mode" 1 477 "int32" `234 
f B "setup_spi2" 1 477 "void(int32 mode)" `233 
f N "spi_write2" 1 478 ""
v L "value" 1 478 "int8" `236 
f B "spi_write2" 1 478 "void(int8 value)" `235 
f N "spi_read2" 1 479 ""
f B "spi_read2" 1 479 "int8()" `237 
f N "spi_read2" 1 480 ""
v L "value" 1 480 "int8" `239 
f B "spi_read2" 1 480 "int8(int8 value)" `238 
f N "spi_data_is_in2" 1 481 ""
f B "spi_data_is_in2" 1 481 "int8()" `240  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 483 "0x00"
d G "SPI_MASTER" 1 484 "0x20"
d G "SPI_SLAVE" 1 485 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 486 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 487 "0x00"
d G "SPI_CLK_DIV_4" 1 488 "0x00"
d G "SPI_CLK_DIV_16" 1 489 "0x01"
d G "SPI_CLK_DIV_64" 1 490 "0x02"
d G "SPI_CLK_T2" 1 491 "0x03"
d G "SPI_SS_DISABLED" 1 492 "0x01"
d G "SPI_XMIT_L_TO_H" 1 494 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 495 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 497 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 498 "0x8000"
d G "SPI_L_TO_H" 1 501 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 502 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 506 ""
v L "baud" 1 506 "int32" `242 
f B "setup_uart" 1 506 "void(int32 baud)" `241 
f N "setup_uart" 1 507 ""
v L "baud" 1 507 "int32" `244 
v L "stream" 1 507 "int8" `245 
f B "setup_uart" 1 507 "void(int32 baud,int8 stream)" `243 
f N "setup_uart" 1 508 ""
v L "baud" 1 508 "int32" `247 
v L "stream" 1 508 "int8" `248 
v L "clock" 1 508 "int32" `249 
f B "setup_uart" 1 508 "void(int32 baud,int8 stream,int32 clock)" `246 
f N "set_uart_speed" 1 509 ""
v L "baud" 1 509 "int32" `251 
f B "set_uart_speed" 1 509 "void(int32 baud)" `250 
f N "set_uart_speed" 1 510 ""
v L "baud" 1 510 "int32" `253 
v L "stream" 1 510 "int8" `254 
f B "set_uart_speed" 1 510 "void(int32 baud,int8 stream)" `252 
f N "set_uart_speed" 1 511 ""
v L "baud" 1 511 "int32" `256 
v L "stream" 1 511 "int8" `257 
v L "clock" 1 511 "int32" `258 
f B "set_uart_speed" 1 511 "void(int32 baud,int8 stream,int32 clock)" `255  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 515 "2"
d G "UART_DATA" 1 516 "4"
d G "UART_AUTODETECT" 1 517 "8"
d G "UART_AUTODETECT_NOWAIT" 1 518 "9"
d G "UART_WAKEUP_ON_RDA" 1 519 "10"
d G "UART_SEND_BREAK" 1 520 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 525 ""
v L "mode" 1 525 "int32" `260 
f B "setup_comparator" 1 525 "void(int32 mode)" `259  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 528 "0x404"
d G "NC_NC" 1 529 "0x404"
d G "CP1_A0_A3" 1 532 "0x000080"
d G "CP1_A1_A3" 1 533 "0x000081"
d G "CP1_B3_A3" 1 534 "0x000082"
d G "CP1_B1_A3" 1 535 "0x000083"
d G "CP1_A0_DAC" 1 536 "0x000084"
d G "CP1_A1_DAC" 1 537 "0x000085"
d G "CP1_B3_DAC" 1 538 "0x000086"
d G "CP1_B1_DAC" 1 539 "0x000087"
d G "CP1_A0_FVR" 1 540 "0x200084"
d G "CP1_A1_FVR" 1 541 "0x200085"
d G "CP1_B3_FVR" 1 542 "0x200086"
d G "CP1_B1_FVR" 1 543 "0x200087"
d G "CP1_OUT_ON_A4" 1 545 "0x000020"
d G "CP1_INVERT" 1 546 "0x000010"
d G "CP1_FAST" 1 547 "0x000008"
d G "CP1_HYST" 1 548 "0x080000"
d G "CP1_SYNC" 1 549 "0x020000"
d G "CP2_A0_A2" 1 552 "0x008000"
d G "CP2_A1_A2" 1 553 "0x008100"
d G "CP2_B3_A2" 1 554 "0x008200"
d G "CP2_B1_A2" 1 555 "0x008300"
d G "CP2_A0_DAC" 1 556 "0x008400"
d G "CP2_A1_DAC" 1 557 "0x008500"
d G "CP2_B3_DAC" 1 558 "0x008600"
d G "CP2_B1_DAC" 1 559 "0x008700"
d G "CP2_A0_FVR" 1 560 "0x108400"
d G "CP2_A1_FVR" 1 561 "0x108500"
d G "CP2_B3_FVR" 1 562 "0x108600"
d G "CP2_B1_FVR" 1 563 "0x108700"
d G "CP2_OUT_ON_A5" 1 565 "0x002000"
d G "CP2_INVERT" 1 566 "0x001000"
d G "CP2_FAST" 1 567 "0x000800"
d G "CP2_HYST" 1 568 "0x040000"
d G "CP2_SYNC" 1 569 "0x010000"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 576 ""
v L "mode" 1 576 "int8" `264 
f B "setup_vref" 1 576 "void(int8 mode)" `263  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 578 "0"
d G "VREF_1v024" 1 579 "0x90"
d G "VREF_2v048" 1 580 "0xA0"
d G "VREF_4v096" 1 581 "0xB0"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_low_volt_detect" 1 585 ""
v L "mode" 1 585 "int8" `266 
f B "setup_low_volt_detect" 1 585 "void(int8 mode)" `265  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 587 "0x1F"
d G "LVD_47" 1 588 "0x1E"
d G "LVD_43" 1 589 "0x1D"
d G "LVD_41" 1 590 "0x1C"
d G "LVD_38" 1 591 "0x1B"
d G "LVD_36" 1 592 "0x1A"
d G "LVD_34" 1 593 "0x19"
d G "LVD_32" 1 594 "0x18"
d G "LVD_29" 1 595 "0x17"
d G "LVD_28" 1 596 "0x16"
d G "LVD_27" 1 597 "0x15"
d G "LVD_25" 1 598 "0x14"
d G "LVD_24" 1 599 "0x13"
d G "LVD_22" 1 600 "0x12"
d G "LVD_20" 1 601 "0x11"
d G "LVD_18" 1 602 "0x10"
d G "LVD_TRIGGER_BELOW" 1 604 "0"
d G "LVD_TRIGGER_ABOVE" 1 605 "0x80"
c L "setup_low_volt_detect" 1 3 3 "FUNCTION"
f N "setup_dac" 1 610 ""
v L "mode" 1 610 "int8" `268 
f B "setup_dac" 1 610 "void(int8 mode)" `267 
f N "dac_write" 1 611 ""
v L "value" 1 611 "int8" `270 
f B "dac_write" 1 611 "void(int8 value)" `269  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 613 "0"
d G "DAC_VSS_VDD" 1 614 "0x80"
d G "DAC_VREF_VDD" 1 615 "0x81"
d G "DAC_VSS_VREF" 1 616 "0x84"
d G "DAC_VREF_VREF" 1 617 "0x85"
d G "DAC_VSS_FVR" 1 618 "0x88"
d G "DAC_VREF_FVR" 1 619 "0x89"
d G "DAC_OUTPUT" 1 621 "0x20"
d G "DAC_LVP_POS" 1 622 "0x40"
d G "DAC_LVP_NEG" 1 623 "0"
c L "dac_write" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 628 ""
v L "mode" 1 628 "int16" `272 
f B "setup_oscillator" 1 628 "int8(int16 mode)" `271 
f N "setup_oscillator" 1 629 ""
v L "mode" 1 629 "int16" `274 
v L "tune" 1 629 "sint8" `275 
f B "setup_oscillator" 1 629 "int8(int16 mode,sint8 tune)" `273  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 1 631 "0x4000"
d G "OSC_PLL_OFF" 1 632 "0"
d G "OSC_31250" 1 633 "0x8000"
d G "OSC_31KHZ" 1 634 "0x00"
d G "OSC_250KHZ" 1 635 "0x10"
d G "OSC_500KHZ" 1 636 "0x20"
d G "OSC_1MHZ" 1 637 "0x30"
d G "OSC_2MHZ" 1 638 "0x40"
d G "OSC_4MHZ" 1 639 "0x50"
d G "OSC_8MHZ" 1 640 "0x60"
d G "OSC_16MHZ" 1 641 "0x70"
d G "OSC_32MHZ" 1 642 "0x4060"
d G "OSC_64MHZ" 1 643 "0x4070"
d G "OSC_TIMER1" 1 645 "1"
d G "OSC_INTRC" 1 646 "2"
d G "OSC_NORMAL" 1 647 "0"
d G "OSC_IDLE_MODE" 1 649 "0x80"
d G "OSC_STATE_STABLE" 1 653 "4"
d G "OSC_STATE_EXT_RUNNING" 1 654 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 661 ""
v L "mode" 1 661 "int16" `277 
f B "setup_adc" 1 661 "void(int16 mode)" `276 
f N "read_adc" 1 662 ""
f B "read_adc" 1 662 "int8()" `278 
f N "read_adc" 1 663 ""
v L "mode" 1 663 "int8" `280 
f B "read_adc" 1 663 "int8(int8 mode)" `279 
f N "read_adc" 1 664 ""
f G "read_adc" 1 664 "int16()" `281 
f N "read_adc" 1 665 ""
v L "mode" 1 665 "int8" `282 
f G "read_adc" 1 665 "int16(int8 mode,int32 pins)" `281 
f N "adc_done" 1 666 ""
f B "adc_done" 1 666 "int8(int8 mode,int32 pins)" `281  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 668 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 669 "0x100"
d G "ADC_CLOCK_DIV_4" 1 670 "0x04"
d G "ADC_CLOCK_DIV_8" 1 671 "0x01"
d G "ADC_CLOCK_DIV_16" 1 672 "0x05"
d G "ADC_CLOCK_DIV_32" 1 673 "0x02"
d G "ADC_CLOCK_DIV_64" 1 674 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 675 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 677 "0x00"
d G "ADC_TAD_MUL_2" 1 678 "0x08"
d G "ADC_TAD_MUL_4" 1 679 "0x10"
d G "ADC_TAD_MUL_6" 1 680 "0x18"
d G "ADC_TAD_MUL_8" 1 681 "0x20"
d G "ADC_TAD_MUL_12" 1 682 "0x28"
d G "ADC_TAD_MUL_16" 1 683 "0x30"
d G "ADC_TAD_MUL_20" 1 684 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 687 ""
v L "pins" 1 687 "int32" `283 
f B "setup_adc_ports" 1 687 "void(int32 pins)" `282 
f N "setup_adc_ports" 1 688 ""
v L "pins" 1 688 "int32" `285 
v L "reference" 1 688 "int32" `286 
f B "setup_adc_ports" 1 688 "void(int32 pins,int32 reference)" `284 
f N "set_analog_pins" 1 689 ""
v L "pin" 1 689 "int8" `288 
f B "set_analog_pins" 1 689 "void(int8 pin,*int8 _VA_LIST)" `287 
f N "setup_adc_reference" 1 690 ""
v L "reference" 1 690 "int32" `291 
f B "setup_adc_reference" 1 690 "void(int32 reference)" `290 
f N "set_adc_channel" 1 691 ""
v L "channel" 1 691 "int8" `293 
f B "set_adc_channel" 1 691 "void(int8 channel)" `292  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 695 "0x00800000" "| A0"
d G "sAN1" 1 696 "0x01000000" "| A1"
d G "sAN2" 1 697 "0x02000000" "| A2"
d G "sAN3" 1 698 "0x04000000" "| A3"
d G "sAN4" 1 699 "0x08000000" "| A5"
d G "sAN5" 1 700 "0x00100000" "| E0"
d G "sAN6" 1 701 "0x00200000" "| E1"
d G "sAN7" 1 702 "0x00400000" "| E2"
d G "sAN8" 1 703 "0x00010000" "| B2"
d G "sAN9" 1 704 "0x00020000" "| B3"
d G "sAN10" 1 705 "0x00008000" "| B1"
d G "sAN11" 1 706 "0x00040000" "| B4"
d G "sAN12" 1 707 "0x00004000" "| B0"
d G "sAN13" 1 708 "0x00080000" "| B5"
d G "sAN14" 1 709 "0x00000100" "| C2"
d G "sAN15" 1 710 "0x00000200" "| C3"
d G "sAN16" 1 711 "0x00000400" "| C4"
d G "sAN17" 1 712 "0x00000800" "| C5"
d G "sAN18" 1 713 "0x00001000" "| C6"
d G "sAN19" 1 714 "0x00002000" "| C7"
d G "sAN20" 1 715 "0x00000001" "| D0"
d G "sAN21" 1 716 "0x00000002" "| D1"
d G "sAN22" 1 717 "0x00000004" "| D2"
d G "sAN23" 1 718 "0x00000008" "| D3"
d G "sAN24" 1 719 "0x00000010" "| D4"
d G "sAN25" 1 720 "0x00000020" "| D5"
d G "sAN26" 1 721 "0x00000040" "| D6"
d G "sAN27" 1 722 "0x00000080" "| D7"
d G "NO_ANALOGS" 1 723 "0" "None"
d G "ALL_ANALOG" 1 724 "0x0FFFFFFF" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7 D0 D1 D2 D3 D4 D5 D6 D7"
d G "VSS_VDD" 1 727 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 728 "0x40000000" "| Range 0-VrefH"
d G "VSS_FVR" 1 729 "0x80000000" "| Range 0-Fvr BUF2"
d G "VREF_VDD" 1 730 "0x10000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 731 "0x50000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 732 "0x90000000" "| Range VrefL-Fvr BUF2"
d G "CTMU_CHANNEL" 1 736 "0x1D"
d G "DAC_CHANNEL" 1 737 "0x1E"
d G "FVR_CHANNEL" 1 738 "0x1F"
d G "ADC_START_AND_READ" 1 741 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 742 "1"
d G "ADC_READ_ONLY" 1 743 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 749 ""
v L "x" 1 749 "sint8" `295 
f B "abs" 1 749 "sint8(sint8 x)" `294 
f N "abs" 1 750 ""
v L "x" 1 750 "sint16" `297 
f B "abs" 1 750 "sint16(sint16 x)" `296 
f N "abs" 1 751 ""
v L "x" 1 751 "sint32" `299 
f B "abs" 1 751 "sint32(sint32 x)" `298 
f N "abs" 1 752 ""
v L "x" 1 752 "float" `301 
f B "abs" 1 752 "float(float x)" `300 
f N "_mul" 1 753 ""
v L "??65535" 1 753 "int8" `303 
v L "??65535" 1 753 "int8" `304 
f B "_mul" 1 753 "int16(int8 ,int8 )" `302 
f N "_mul" 1 754 ""
v L "??65535" 1 754 "sint8" `306 
v L "??65535" 1 754 "sint8" `307 
f B "_mul" 1 754 "sint16(sint8 ,sint8 )" `305 
f N "_mul" 1 755 ""
v L "??65535" 1 755 "int16" `309 
v L "??65535" 1 755 "int16" `310 
f B "_mul" 1 755 "int32(int16 ,int16 )" `308 
f N "_mul" 1 756 ""
v L "??65535" 1 756 "sint16" `312 
v L "??65535" 1 756 "sint16" `313 
f B "_mul" 1 756 "sint32(sint16 ,sint16 )" `311  "Memory Manipulation Prototypes:"
f N "read_bank" 1 759 ""
v L "bank" 1 759 "int8" `315 
v L "offset" 1 759 "int8" `316 
f B "read_bank" 1 759 "int8(int8 bank,int8 offset)" `314 
f N "write_bank" 1 760 ""
v L "bank" 1 760 "int8" `318 
v L "offset" 1 760 "int8" `319 
v L "value" 1 760 "int8" `320 
f B "write_bank" 1 760 "void(int8 bank,int8 offset,int8 value)" `317 
f N "strcpy" 1 761 ""
v L "dest" 1 761 "*int8" `322 
v L "src" 1 761 "*int8" `323 
f B "strcpy" 1 761 "void(*int8 dest,*int8 src)" `321 
f N "memset" 1 762 ""
v L "destination" 1 762 "*int8" `325 
v L "value" 1 762 "int8" `326 
v L "num" 1 762 "int16" `327 
f B "memset" 1 762 "void(*int8 destination,int8 value,int16 num)" `324 
f N "memcpy" 1 763 ""
v L "destination" 1 763 "*int8" `329 
v L "source" 1 763 "*int8" `330 
v L "num" 1 763 "int16" `331 
f B "memcpy" 1 763 "void(*int8 destination,*int8 source,int16 num)" `328  "String Prototypes:"
f N "toupper" 1 766 ""
v L "cvalue" 1 766 "int8" `333 
f B "toupper" 1 766 "int8(int8 cvalue)" `332 
f N "tolower" 1 767 ""
v L "cvalue" 1 767 "int8" `335 
f B "tolower" 1 767 "int8(int8 cvalue)" `334 
f N "sprintf" 1 768 ""
v L "string" 1 768 "*int8" `337 
v L "cstring" 1 768 "*int8" `338 
f B "sprintf" 1 768 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `336  "Data Manipulators Prototypes:"
f N "shift_left" 1 771 ""
v L "address" 1 771 "*int8" `341 
v L "bytes" 1 771 "int8" `342 
v L "value" 1 771 "int8" `343 
f B "shift_left" 1 771 "int8(*int8 address,int8 bytes,int8 value)" `340 
f N "shift_right" 1 772 ""
v L "address" 1 772 "*int8" `345 
v L "bytes" 1 772 "int8" `346 
v L "value" 1 772 "int8" `347 
f B "shift_right" 1 772 "int8(*int8 address,int8 bytes,int8 value)" `344 
f N "rotate_left" 1 773 ""
v L "address" 1 773 "*int8" `349 
v L "bytes" 1 773 "int8" `350 
f B "rotate_left" 1 773 "void(*int8 address,int8 bytes)" `348 
f N "rotate_right" 1 774 ""
v L "address" 1 774 "*int8" `352 
v L "bytes" 1 774 "int8" `353 
f B "rotate_right" 1 774 "void(*int8 address,int8 bytes)" `351 
f N "swap" 1 775 ""
v L "value" 1 775 "int8" `355 
f B "swap" 1 775 "void(int8 value)" `354 
f N "make8" 1 776 ""
v L "var" 1 776 "int16" `357 
v L "offset" 1 776 "int8" `358 
f B "make8" 1 776 "int8(int16 var,int8 offset)" `356 
f N "make8" 1 777 ""
v L "var" 1 777 "int32" `360 
v L "offset" 1 777 "int8" `361 
f B "make8" 1 777 "int8(int32 var,int8 offset)" `359 
f N "make16" 1 778 ""
v L "varhigh" 1 778 "int8" `363 
v L "varlow" 1 778 "int8" `364 
f B "make16" 1 778 "int16(int8 varhigh,int8 varlow)" `362 
f N "make32" 1 779 ""
v L "var1" 1 779 "int16" `366 
f B "make32" 1 779 "int32(int16 var1)" `365 
f N "make32" 1 780 ""
v L "var1" 1 780 "int16" `368 
v L "var2" 1 780 "int16" `369 
f B "make32" 1 780 "int32(int16 var1,int16 var2)" `367 
f N "make32" 1 781 ""
v L "var1" 1 781 "int16" `371 
v L "var2" 1 781 "int8" `372 
f B "make32" 1 781 "int32(int16 var1,int8 var2)" `370 
f N "make32" 1 782 ""
v L "var1" 1 782 "int16" `374 
v L "var2" 1 782 "int8" `375 
v L "var3" 1 782 "int8" `376 
f B "make32" 1 782 "int32(int16 var1,int8 var2,int8 var3)" `373 
f N "make32" 1 783 ""
v L "var1" 1 783 "int8" `378 
f B "make32" 1 783 "int32(int8 var1)" `377 
f N "make32" 1 784 ""
v L "var1" 1 784 "int8" `380 
v L "var2" 1 784 "int8" `381 
f B "make32" 1 784 "int32(int8 var1,int8 var2)" `379 
f N "make32" 1 785 ""
v L "var1" 1 785 "int8" `383 
v L "var2" 1 785 "int8" `384 
v L "var3" 1 785 "int8" `385 
f B "make32" 1 785 "int32(int8 var1,int8 var2,int8 var3)" `382 
f N "make32" 1 786 ""
v L "var1" 1 786 "int8" `387 
v L "var2" 1 786 "int8" `388 
v L "var3" 1 786 "int8" `389 
v L "var4" 1 786 "int8" `390 
f B "make32" 1 786 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `386 
f N "make32" 1 787 ""
v L "var1" 1 787 "int8" `392 
v L "var2" 1 787 "int16" `393 
f B "make32" 1 787 "int32(int8 var1,int16 var2)" `391 
f N "make32" 1 788 ""
v L "var1" 1 788 "int8" `395 
v L "var2" 1 788 "int16" `396 
v L "var3" 1 788 "int8" `397 
f B "make32" 1 788 "int32(int8 var1,int16 var2,int8 var3)" `394 
f N "make32" 1 789 ""
v L "var1" 1 789 "int8" `399 
v L "var2" 1 789 "int8" `400 
v L "var3" 1 789 "int16" `401 
f B "make32" 1 789 "int32(int8 var1,int8 var2,int16 var3)" `398 
f N "bit_set" 1 790 ""
v L "var" 1 790 "int8" `403 
v L "bit" 1 790 "int8" `404 
f B "bit_set" 1 790 "void(int8 var,int8 bit)" `402 
f N "bit_set" 1 791 ""
v L "var" 1 791 "int16" `406 
v L "bit" 1 791 "int8" `407 
f B "bit_set" 1 791 "void(int16 var,int8 bit)" `405 
f N "bit_set" 1 792 ""
v L "var" 1 792 "int32" `409 
v L "bit" 1 792 "int8" `410 
f B "bit_set" 1 792 "void(int32 var,int8 bit)" `408 
f N "bit_clear" 1 793 ""
v L "var" 1 793 "int8" `412 
v L "bit" 1 793 "int8" `413 
f B "bit_clear" 1 793 "void(int8 var,int8 bit)" `411 
f N "bit_clear" 1 794 ""
v L "var" 1 794 "int16" `415 
v L "bit" 1 794 "int8" `416 
f B "bit_clear" 1 794 "void(int16 var,int8 bit)" `414 
f N "bit_clear" 1 795 ""
v L "var" 1 795 "int32" `418 
v L "bit" 1 795 "int8" `419 
f B "bit_clear" 1 795 "void(int32 var,int8 bit)" `417 
f N "bit_test" 1 796 ""
v L "var" 1 796 "int8" `421 
v L "bit" 1 796 "int8" `422 
f B "bit_test" 1 796 "int8(int8 var,int8 bit)" `420 
f N "bit_test" 1 797 ""
v L "var" 1 797 "int16" `424 
v L "bit" 1 797 "int8" `425 
f B "bit_test" 1 797 "int8(int16 var,int8 bit)" `423 
f N "bit_test" 1 798 ""
v L "var" 1 798 "int32" `427 
v L "bit" 1 798 "int8" `428 
f B "bit_test" 1 798 "int8(int32 var,int8 bit)" `426  "#use delay() Prototypes:"
f N "delay_cycles" 1 801 ""
v L "count" 1 801 "int8" `430 
f B "delay_cycles" 1 801 "void(int8 count)" `429 
f N "delay_ms" 1 802 ""
v L "time" 1 802 "int16" `432 
f B "delay_ms" 1 802 "void(int16 time)" `431 
f N "delay_us" 1 803 ""
v L "time" 1 803 "int16" `434 
f B "delay_us" 1 803 "void(int16 time)" `433  "#use rs232() Prototypes:"
f N "putchar" 1 806 ""
v L "cdata" 1 806 "int8" `436 
f B "putchar" 1 806 "void(int8 cdata)" `435 
f N "putchar" 1 807 ""
v L "cdata" 1 807 "int8" `438 
v L "stream" 1 807 "int8" `439 
f B "putchar" 1 807 "void(int8 cdata,int8 stream)" `437 
f N "puts" 1 808 ""
v L "string" 1 808 "*int8" `441 
f B "puts" 1 808 "void(*int8 string)" `440 
f N "puts" 1 809 ""
v L "string" 1 809 "*int8" `443 
v L "stream" 1 809 "int8" `444 
f B "puts" 1 809 "void(*int8 string,int8 stream)" `442 
f N "getch" 1 810 ""
f B "getch" 1 810 "int8()" `445 
f N "getch" 1 811 ""
v L "stream" 1 811 "int8" `447 
f B "getch" 1 811 "int8(int8 stream)" `446 
f N "gets" 1 812 ""
v L "string" 1 812 "*int8" `449 
f B "gets" 1 812 "void(*int8 string)" `448 
f N "gets" 1 813 ""
v L "string" 1 813 "*int8" `451 
v L "stream" 1 813 "int8" `452 
f B "gets" 1 813 "void(*int8 string,int8 stream)" `450 
f N "kbhit" 1 814 ""
f B "kbhit" 1 814 "int8()" `453 
f N "kbhit" 1 815 ""
v L "stream" 1 815 "int8" `455 
f B "kbhit" 1 815 "int8(int8 stream)" `454 
f N "printf" 1 816 ""
v L "string" 1 816 "*int8" `457 
f B "printf" 1 816 "void(*int8 string,*int8 _VA_LIST)" `456 
f N "fprintf" 1 817 ""
v L "stream" 1 817 "int8" `460 
v L "string" 1 817 "*int8" `461 
f B "fprintf" 1 817 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `459 
f N "putc_send" 1 818 ""
f B "putc_send" 1 818 "void()" `463 
f N "fputc_send" 1 819 ""
v L "stream" 1 819 "int8" `465 
f B "fputc_send" 1 819 "void(int8 stream)" `464 
f N "rcv_buffer_full" 1 820 ""
f B "rcv_buffer_full" 1 820 "int8()" `466 
f N "rcv_buffer_full" 1 821 ""
v L "stream" 1 821 "int8" `468 
f B "rcv_buffer_full" 1 821 "int8(int8 stream)" `467 
f N "rcv_buffer_bytes" 1 822 ""
f B "rcv_buffer_bytes" 1 822 "int16()" `469 
f N "rcv_buffer_bytes" 1 823 ""
v L "stream" 1 823 "int8" `471 
f B "rcv_buffer_bytes" 1 823 "int16(int8 stream)" `470 
f N "tx_buffer_full" 1 824 ""
f B "tx_buffer_full" 1 824 "int8()" `472 
f N "tx_buffer_full" 1 825 ""
v L "stream" 1 825 "int8" `474 
f B "tx_buffer_full" 1 825 "int8(int8 stream)" `473 
f N "tx_buffer_bytes" 1 826 ""
f B "tx_buffer_bytes" 1 826 "int16()" `475 
f N "tx_buffer_bytes" 1 827 ""
v L "stream" 1 827 "int8" `477 
f B "tx_buffer_bytes" 1 827 "int16(int8 stream)" `476  "#use i2c() Prototypes:"
f N "i2c_read" 1 830 ""
f B "i2c_read" 1 830 "int8()" `478 
f N "i2c_read" 1 831 ""
v L "ack" 1 831 "int8" `480 
f B "i2c_read" 1 831 "int8(int8 ack)" `479 
f N "i2c_read" 1 832 ""
v L "stream" 1 832 "int8" `482 
v L "ack" 1 832 "int8" `483 
f B "i2c_read" 1 832 "int8(int8 stream,int8 ack)" `481 
f N "i2c_write" 1 833 ""
v L "data" 1 833 "int8" `485 
f B "i2c_write" 1 833 "int8(int8 data)" `484 
f N "i2c_write" 1 834 ""
v L "stream" 1 834 "int8" `487 
v L "data" 1 834 "int8" `488 
f B "i2c_write" 1 834 "int8(int8 stream,int8 data)" `486 
f N "i2c_start" 1 835 ""
f B "i2c_start" 1 835 "void()" `489 
f N "i2c_start" 1 836 ""
v L "stream" 1 836 "int8" `491 
f B "i2c_start" 1 836 "void(int8 stream)" `490 
f N "i2c_start" 1 837 ""
v L "stream" 1 837 "int8" `493 
v L "restart" 1 837 "int8" `494 
f B "i2c_start" 1 837 "void(int8 stream,int8 restart)" `492 
f N "i2c_stop" 1 838 ""
f B "i2c_stop" 1 838 "void()" `495 
f N "i2c_stop" 1 839 ""
v L "stream" 1 839 "int8" `497 
f B "i2c_stop" 1 839 "void(int8 stream)" `496 
f N "i2c_isr_state" 1 840 ""
f B "i2c_isr_state" 1 840 "int8()" `498 
f N "i2c_slaveaddr" 1 841 ""
v L "addr" 1 841 "int8" `500 
f B "i2c_slaveaddr" 1 841 "void(int8 addr)" `499 
f N "i2c_slaveaddr" 1 842 ""
v L "stream" 1 842 "int8" `502 
v L "addr" 1 842 "int8" `503 
f B "i2c_slaveaddr" 1 842 "void(int8 stream,int8 addr)" `501 
f N "i2c_poll" 1 843 ""
f B "i2c_poll" 1 843 "int8()" `504 
f N "i2c_poll" 1 844 ""
v L "stream" 1 844 "int8" `506 
f B "i2c_poll" 1 844 "int8(int8 stream)" `505 
f N "i2c_init" 1 845 ""
v L "baud" 1 845 "int32" `508 
f B "i2c_init" 1 845 "void(int32 baud)" `507 
f N "i2c_init" 1 846 ""
v L "stream" 1 846 "int8" `510 
v L "baud" 1 846 "int32" `511 
f B "i2c_init" 1 846 "void(int8 stream,int32 baud)" `509 
f N "i2c_transfer" 1 847 ""
v L "address" 1 847 "int8" `513 
v L "wData" 1 847 "*int8" `514 
v L "wCount" 1 847 "int8" `515 
f B "i2c_transfer" 1 847 "void(int8 address,*int8 wData,int8 wCount)" `512 
f N "i2c_transfer" 1 848 ""
v L "address" 1 848 "int8" `517 
v L "wData" 1 848 "*int8" `518 
v L "wCount" 1 848 "int8" `519 
v L "rData" 1 848 "*int8" `520 
v L "rCount" 1 848 "*int8" `521 
f B "i2c_transfer" 1 848 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `516 
f N "i2c_transfer" 1 849 ""
v L "stream" 1 849 "int8" `523 
v L "address" 1 849 "int8" `524 
v L "wData" 1 849 "*int8" `525 
v L "wCount" 1 849 "int8" `526 
f B "i2c_transfer" 1 849 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `522 
f N "i2c_transfer" 1 850 ""
v L "stream" 1 850 "int8" `528 
v L "address" 1 850 "int8" `529 
v L "wData" 1 850 "*int8" `530 
v L "wCount" 1 850 "int8" `531 
v L "rData" 1 850 "*int8" `532 
v L "rCount" 1 850 "*int8" `533 
f B "i2c_transfer" 1 850 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `527 
f N "i2c_transfer_out" 1 851 ""
v L "address" 1 851 "int8" `535 
v L "wData" 1 851 "*int8" `536 
v L "wCount" 1 851 "int8" `537 
f B "i2c_transfer_out" 1 851 "void(int8 address,*int8 wData,int8 wCount)" `534 
f N "i2c_transfer_out" 1 852 ""
v L "stream" 1 852 "int8" `539 
v L "address" 1 852 "int8" `540 
v L "wData" 1 852 "*int8" `541 
v L "wCount" 1 852 "int8" `542 
f B "i2c_transfer_out" 1 852 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `538 
f N "i2c_transfer_in" 1 853 ""
v L "address" 1 853 "int8" `544 
v L "rData" 1 853 "*int8" `545 
v L "rCount" 1 853 "int8" `546 
f B "i2c_transfer_in" 1 853 "void(int8 address,*int8 rData,int8 rCount)" `543 
f N "i2c_transfer_in" 1 854 ""
v L "stream" 1 854 "int8" `548 
v L "address" 1 854 "int8" `549 
v L "rData" 1 854 "*int8" `550 
v L "rCount" 1 854 "int8" `551 
f B "i2c_transfer_in" 1 854 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `547  "#use spi() Prototypes:"
f N "spi_xfer" 1 857 ""
f B "spi_xfer" 1 857 "int8()" `552 
f N "spi_xfer" 1 858 ""
f G "spi_xfer" 1 858 "int16(int8 data)" `553 
f N "spi_xfer" 1 859 ""
f G "spi_xfer" 1 859 "int32(int8 data)" `553 
f N "spi_xfer" 1 860 ""
v L "data" 1 860 "int8" `554 
f B "spi_xfer" 1 860 "int8(int8 data)" `553 
f N "spi_xfer" 1 861 ""
v L "data" 1 861 "int16" `556 
f B "spi_xfer" 1 861 "int16(int16 data)" `555 
f N "spi_xfer" 1 862 ""
v L "data" 1 862 "int32" `558 
f B "spi_xfer" 1 862 "int32(int32 data)" `557 
f N "spi_xfer" 1 863 ""
v L "stream" 1 863 "int8" `560 
v L "data" 1 863 "int8" `561 
f B "spi_xfer" 1 863 "int8(int8 stream,int8 data)" `559 
f N "spi_xfer" 1 864 ""
v L "stream" 1 864 "int8" `563 
v L "data" 1 864 "int16" `564 
f B "spi_xfer" 1 864 "int16(int8 stream,int16 data)" `562 
f N "spi_xfer" 1 865 ""
v L "stream" 1 865 "int8" `566 
v L "data" 1 865 "int32" `567 
f B "spi_xfer" 1 865 "int32(int8 stream,int32 data)" `565 
f N "spi_xfer" 1 866 ""
v L "stream" 1 866 "int8" `569 
v L "data" 1 866 "int8" `570 
v L "bits" 1 866 "int8" `571 
f B "spi_xfer" 1 866 "int8(int8 stream,int8 data,int8 bits)" `568 
f N "spi_xfer" 1 867 ""
v L "stream" 1 867 "int8" `573 
v L "data" 1 867 "int16" `574 
v L "bits" 1 867 "int8" `575 
f B "spi_xfer" 1 867 "int16(int8 stream,int16 data,int8 bits)" `572 
f N "spi_xfer" 1 868 ""
v L "stream" 1 868 "int8" `577 
v L "data" 1 868 "int32" `578 
v L "bits" 1 868 "int8" `579 
f B "spi_xfer" 1 868 "int32(int8 stream,int32 data,int8 bits)" `576 
f N "spi_init" 1 869 ""
v L "baud" 1 869 "int32" `581 
f B "spi_init" 1 869 "void(int32 baud)" `580 
f N "spi_init" 1 870 ""
v L "stream" 1 870 "int8" `583 
v L "baud" 1 870 "int32" `584 
f B "spi_init" 1 870 "void(int8 stream,int32 baud)" `582 
f N "spi_speed" 1 871 ""
v L "baud" 1 871 "int32" `586 
f B "spi_speed" 1 871 "void(int32 baud)" `585 
f N "spi_speed" 1 872 ""
v L "stream" 1 872 "int8" `588 
v L "baud" 1 872 "int32" `589 
f B "spi_speed" 1 872 "void(int8 stream,int32 baud)" `587 
f N "spi_speed" 1 873 ""
v L "stream" 1 873 "int8" `591 
v L "baud" 1 873 "int32" `592 
v L "clock" 1 873 "int32" `593 
f B "spi_speed" 1 873 "void(int8 stream,int32 baud,int32 clock)" `590 
f N "spi_prewrite" 1 874 ""
v L "data" 1 874 "int8" `595 
f B "spi_prewrite" 1 874 "void(int8 data)" `594 
f N "spi_prewrite" 1 875 ""
v L "data" 1 875 "int16" `597 
f B "spi_prewrite" 1 875 "void(int16 data)" `596 
f N "spi_prewrite" 1 876 ""
v L "data" 1 876 "int32" `599 
f B "spi_prewrite" 1 876 "void(int32 data)" `598 
f N "spi_prewrite" 1 877 ""
v L "??65535" 1 877 "int8" `601 
v L "data" 1 877 "int8" `602 
f B "spi_prewrite" 1 877 "void(int8 ,int8 data)" `600 
f N "spi_prewrite" 1 878 ""
v L "??65535" 1 878 "int8" `604 
v L "data" 1 878 "int16" `605 
f B "spi_prewrite" 1 878 "void(int8 ,int16 data)" `603 
f N "spi_prewrite" 1 879 ""
v L "??65535" 1 879 "int8" `607 
v L "data" 1 879 "int32" `608 
f B "spi_prewrite" 1 879 "void(int8 ,int32 data)" `606 
f N "spi_xfer_in" 1 880 ""
f B "spi_xfer_in" 1 880 "int8()" `609 
f N "spi_xfer_in" 1 881 ""
f G "spi_xfer_in" 1 881 "int16(int8 bits)" `610 
f N "spi_xfer_in" 1 882 ""
f G "spi_xfer_in" 1 882 "int32(int8 bits)" `610 
f N "spi_xfer_in" 1 883 ""
v L "bits" 1 883 "int8" `611 
f B "spi_xfer_in" 1 883 "int8(int8 bits)" `610 
f N "spi_xfer_in" 1 884 ""
v L "bits" 1 884 "int8" `613 
f G "spi_xfer_in" 1 884 "int16(int8 bits,int8 bits)" `612 
f N "spi_xfer_in" 1 885 ""
v L "bits" 1 885 "int8" `613 
f G "spi_xfer_in" 1 885 "int32(int8 bits,int8 bits)" `612 
f N "spi_xfer_in" 1 886 ""
v L "stream" 1 886 "int8" `613 
v L "bits" 1 886 "int8" `614 
f B "spi_xfer_in" 1 886 "int8(int8 stream,int8 bits)" `612 
f N "spi_xfer_in" 1 887 ""
v L "stream" 1 887 "int8" `613 
v L "bits" 1 887 "int8" `617 
f G "spi_xfer_in" 1 887 "int16(int8 stream,int8 bits,int8 task)" `615 
f N "spi_xfer_in" 1 888 ""
v L "stream" 1 888 "int8" `613 
v L "bits" 1 888 "int8" `617 
f G "spi_xfer_in" 1 888 "int32(int8 stream,int8 bits,int8 task)" `615  "#use rtos() Prototypes:"
f N "rtos_run" 1 891 ""
f B "rtos_run" 1 891 "void(int8 stream,int8 bits,int8 task)" `615 
f N "rtos_yield" 1 892 ""
f B "rtos_yield" 1 892 "void(int8 bits,int8 task)" `616 
f N "rtos_enable" 1 893 ""
v L "task" 1 893 "int8" `618 
f B "rtos_enable" 1 893 "void(int8 task)" `617 
f N "rtos_disable" 1 894 ""
v L "task" 1 894 "int8" `620 
f B "rtos_disable" 1 894 "void(int8 task)" `619 
f N "rtos_terminate" 1 895 ""
f B "rtos_terminate" 1 895 "void()" `621 
f N "rtos_await" 1 896 ""
v L "flag" 1 896 "int8" `623 
f B "rtos_await" 1 896 "void(int8 flag)" `622 
f N "rtos_wait" 1 897 ""
v L "sem" 1 897 "int8" `625 
f B "rtos_wait" 1 897 "void(int8 sem)" `624 
f N "rtos_signal" 1 898 ""
v L "sem" 1 898 "int8" `627 
f B "rtos_signal" 1 898 "void(int8 sem)" `626 
f N "rtos_msg_send" 1 899 ""
v L "task" 1 899 "int8" `629 
v L "msg" 1 899 "int8" `630 
f B "rtos_msg_send" 1 899 "void(int8 task,int8 msg)" `628 
f N "rtos_msg_read" 1 900 ""
f B "rtos_msg_read" 1 900 "int8()" `631 
f N "rtos_msg_poll" 1 901 ""
f B "rtos_msg_poll" 1 901 "int8()" `632 
f N "rtos_overrun" 1 902 ""
v L "task" 1 902 "int8" `634 
f B "rtos_overrun" 1 902 "int8(int8 task)" `633 
f N "rtos_stats" 1 903 ""
v L "task" 1 903 "int8" `636 
v L "stat" 1 903 "*int8" `637 
f B "rtos_stats" 1 903 "void(int8 task,*int8 stat)" `635  "#use timer() Prototypes:"
f N "get_ticks" 1 906 ""
f B "get_ticks" 1 906 "int8()" `638 
f N "get_ticks" 1 907 ""
f G "get_ticks" 1 907 "int16(int8 stream)" `639 
f N "get_ticks" 1 908 ""
f G "get_ticks" 1 908 "int32(int8 stream)" `639 
f N "get_ticks" 1 909 ""
v L "stream" 1 909 "int8" `640 
f B "get_ticks" 1 909 "int8(int8 stream)" `639 
f N "get_ticks" 1 910 ""
v L "stream" 1 910 "int8" `642 
f G "get_ticks" 1 910 "int16(int8 stream)" `641 
f N "get_ticks" 1 911 ""
v L "stream" 1 911 "int8" `642 
f G "get_ticks" 1 911 "int32(int8 stream)" `641 
f N "set_ticks" 1 912 ""
v L "value" 1 912 "int8" `642 
f B "set_ticks" 1 912 "void(int8 value)" `641 
f N "set_ticks" 1 913 ""
v L "value" 1 913 "int16" `644 
f B "set_ticks" 1 913 "void(int16 value)" `643 
f N "set_ticks" 1 914 ""
v L "value" 1 914 "int32" `646 
f B "set_ticks" 1 914 "void(int32 value)" `645 
f N "set_ticks" 1 915 ""
v L "stream" 1 915 "int8" `648 
v L "value" 1 915 "int8" `649 
f B "set_ticks" 1 915 "void(int8 stream,int8 value)" `647 
f N "set_ticks" 1 916 ""
v L "stream" 1 916 "int8" `651 
v L "value" 1 916 "int16" `652 
f B "set_ticks" 1 916 "void(int8 stream,int16 value)" `650 
f N "set_ticks" 1 917 ""
v L "stream" 1 917 "int8" `654 
v L "value" 1 917 "int32" `655 
f B "set_ticks" 1 917 "void(int8 stream,int32 value)" `653  "#use pwm() Prototypes:"
f N "pwm_on" 1 920 ""
f B "pwm_on" 1 920 "void()" `656 
f N "pwm_on" 1 921 ""
v L "stream" 1 921 "int8" `658 
f B "pwm_on" 1 921 "void(int8 stream)" `657 
f N "pwm_off" 1 922 ""
f B "pwm_off" 1 922 "void()" `659 
f N "pwm_off" 1 923 ""
v L "stream" 1 923 "int8" `661 
f B "pwm_off" 1 923 "void(int8 stream)" `660 
f N "pwm_set_duty" 1 924 ""
v L "duty" 1 924 "int16" `663 
f B "pwm_set_duty" 1 924 "void(int16 duty)" `662 
f N "pwm_set_duty" 1 925 ""
v L "stream" 1 925 "int8" `665 
v L "duty" 1 925 "int16" `666 
f B "pwm_set_duty" 1 925 "void(int8 stream,int16 duty)" `664 
f N "pwm_set_duty_percent" 1 926 ""
v L "percent" 1 926 "int16" `668 
f B "pwm_set_duty_percent" 1 926 "void(int16 percent)" `667 
f N "pwm_set_duty_percent" 1 927 ""
v L "stream" 1 927 "int8" `670 
v L "percent" 1 927 "int16" `671 
f B "pwm_set_duty_percent" 1 927 "void(int8 stream,int16 percent)" `669 
f N "pwm_set_frequency" 1 928 ""
v L "frequency" 1 928 "int32" `673 
f B "pwm_set_frequency" 1 928 "void(int32 frequency)" `672 
f N "pwm_set_frequency" 1 929 ""
v L "stream" 1 929 "int8" `675 
v L "frequency" 1 929 "int32" `676 
f B "pwm_set_frequency" 1 929 "void(int8 stream,int32 frequency)" `674  "#use capture() Prototypes:"
f N "get_capture_time" 1 932 ""
f B "get_capture_time" 1 932 "int16()" `677 
f N "get_capture_time" 1 933 ""
v L "stream" 1 933 "int8" `679 
f B "get_capture_time" 1 933 "int16(int8 stream)" `678 
f N "get_capture_event" 1 934 ""
f B "get_capture_event" 1 934 "int8()" `680 
f N "get_capture_event" 1 935 ""
v L "stream" 1 935 "int8" `682 
f B "get_capture_event" 1 935 "int8(int8 stream)" `681  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 948 ""
v L "address" 1 948 "int32" `684 
f B "goto_address" 1 948 "void(int32 address)" `683 
f N "label_address" 1 949 ""
v L "label" 1 949 "int32" `686 
f B "label_address" 1 949 "int32(int32 label)" `685  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 952 ""
v L "address" 1 952 "int32" `688 
v L "dataptr" 1 952 "*int8" `689 
v L "count" 1 952 "int16" `690 
f B "read_program_memory" 1 952 "void(int32 address,*int8 dataptr,int16 count)" `687 
f N "read_program_eeprom" 1 953 ""
v L "address" 1 953 "int32" `692 
f B "read_program_eeprom" 1 953 "int16(int32 address)" `691  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 956 ""
v L "address" 1 956 "int32" `694 
v L "dataptr" 1 956 "*int8" `695 
v L "count" 1 956 "int16" `696 
f B "write_program_memory" 1 956 "void(int32 address,*int8 dataptr,int16 count)" `693 
f N "write_program_eeprom" 1 957 ""
v L "address" 1 957 "int32" `698 
v L "data" 1 957 "int16" `699 
f B "write_program_eeprom" 1 957 "void(int32 address,int16 data)" `697  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 962 "unsigned int16"
f N "read_eeprom" 1 967 ""
v L "address" 1 967 "int16" `701 
f B "read_eeprom" 1 967 "int8(int16 address)" `700 
f N "write_eeprom" 1 968 ""
v L "address" 1 968 "int16" `703 
v L "value" 1 968 "int8" `704 
f B "write_eeprom" 1 968 "void(int16 address,int8 value)" `702  "#use touchpad() Prototypes:"
f N "touchpad_state" 1 971 ""
v L "state" 1 971 "int8" `706 
f B "touchpad_state" 1 971 "void(int8 state)" `705 
f N "touchpad_getc" 1 972 ""
f B "touchpad_getc" 1 972 "int8()" `707 
f N "touchpad_hit" 1 973 ""
f B "touchpad_hit" 1 973 "int8()" `708  "INT"
c L "touchpad_hit" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 979 ""
v L "interrupt" 1 979 "int32" `710 
f B "enable_interrupts" 1 979 "void(int32 interrupt)" `709 
f N "disable_interrupts" 1 980 ""
v L "interrupt" 1 980 "int32" `712 
f B "disable_interrupts" 1 980 "void(int32 interrupt)" `711 
f N "clear_interrupt" 1 981 ""
v L "interrupt" 1 981 "int32" `714 
f B "clear_interrupt" 1 981 "void(int32 interrupt)" `713 
f N "interrupt_active" 1 982 ""
v L "interrupt" 1 982 "int32" `716 
f B "interrupt_active" 1 982 "int8(int32 interrupt)" `715 
f N "interrupt_enabled" 1 983 ""
v L "interrupt" 1 983 "int32" `718 
f B "interrupt_enabled" 1 983 "int8(int32 interrupt)" `717 
f N "ext_int_edge" 1 984 ""
v L "source" 1 984 "int8" `720 
v L "edge" 1 984 "int8" `721 
f B "ext_int_edge" 1 984 "void(int8 source,int8 edge)" `719 
f N "jump_to_isr" 1 985 ""
v L "address" 1 985 "int16" `723 
f B "jump_to_isr" 1 985 "void(int16 address)" `722  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 987 "0x40"
d G "H_TO_L" 1 988 "0"
d G "GLOBAL" 1 990 "0xF2C0"
d G "PERIPH" 1 991 "0xF240"
d G "INT_RTCC" 1 992 "0x00F220"
d G "INT_TIMER0" 1 993 "0x00F220"
d G "INT_TIMER1" 1 994 "0x009D01"
d G "INT_TIMER2" 1 995 "0x009D02"
d G "INT_TIMER3" 1 996 "0x00A002"
d G "INT_EXT_L2H" 1 997 "0x5000F210"
d G "INT_EXT_H2L" 1 998 "0x6000F210"
d G "INT_EXT" 1 999 "0x00F210"
d G "INT_EXT1_L2H" 1 1000 "0x5001F008"
d G "INT_EXT1_H2L" 1 1001 "0x6001F008"
d G "INT_EXT1" 1 1002 "0x00F008"
d G "INT_EXT2_L2H" 1 1003 "0x5002F010"
d G "INT_EXT2_H2L" 1 1004 "0x6002F010"
d G "INT_EXT2" 1 1005 "0x00F010"
d G "INT_RB" 1 1006 "0x01FFF208"
d G "INT_AD" 1 1007 "0x009D40"
d G "INT_RDA" 1 1008 "0x009D20"
d G "INT_TBE" 1 1009 "0x009D10"
d G "INT_SSP" 1 1010 "0x009D08"
d G "INT_CCP1" 1 1011 "0x009D04"
d G "INT_CCP2" 1 1012 "0x00A001"
d G "INT_BUSCOL" 1 1013 "0x00A008"
d G "INT_COMP" 1 1014 "0x00A040"
d G "INT_EEPROM" 1 1015 "0x00A010"
d G "INT_TBE2" 1 1016 "0x00A310"
d G "INT_RDA2" 1 1017 "0x00A320"
d G "INT_OSCF" 1 1018 "0x00A080"
d G "INT_HLVD" 1 1019 "0x00A004"
d G "INT_BUSCOL2" 1 1020 "0x00A340"
d G "INT_COMP2" 1 1021 "0x00A020"
d G "INT_SSP2" 1 1022 "0x00A380"
d G "INT_TIMER4" 1 1023 "0x007D01"
d G "INT_TIMER5" 1 1024 "0x007D02"
d G "INT_TIMER6" 1 1025 "0x007D04"
d G "INT_CCP3" 1 1026 "0x007A01"
d G "INT_CCP4" 1 1027 "0x007A02"
d G "INT_CCP5" 1 1028 "0x007A04"
d G "INT_TMR1G" 1 1029 "0x00A301"
d G "INT_TMR3G" 1 1030 "0x00A302"
d G "INT_TMR5G" 1 1031 "0x00A304"
d G "INT_CTMU" 1 1032 "0x00A308"
d G "INT_RB4" 1 1033 "0x110F208"
d G "INT_RB5" 1 1034 "0x120F208"
d G "INT_RB6" 1 1035 "0x140F208"
d G "INT_RB7" 1 1036 "0x180F208"
D G "_STDINT" 2 19 ""
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int8_t" 2 23 "sint8" `724 
T G "uint8_t" 2 24 "int8" `725 
T G "int16_t" 2 25 "sint16" `726 
T G "uint16_t" 2 26 "int16" `727 
T G "int32_t" 2 27 "sint32" `728 
T G "uint32_t" 2 28 "int32" `729 
D G "INT8_MAX" 2 37 " (127)"
D G "INT8_MIN" 2 38 " (-128)"
D G "UINT8_MAX" 2 39 " (255)"
D G "INT16_MAX" 2 41 " (32767)"
D G "INT16_MIN" 2 42 " (-32768)"
D G "UINT16_MAX" 2 43 " (65535)"
D G "INT32_MAX" 2 45 " (2147483647)"
D G "INT32_MIN" 2 46 " (-2147483648)"
D G "UINT32_MAX" 2 47 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_least8_t" 2 61 "sint8" `730 
T G "uint_least8_t" 2 62 "int8" `731 
T G "int_least16_t" 2 63 "sint16" `732 
T G "uint_least16_t" 2 64 "int16" `733 
T G "int_least32_t" 2 65 "sint32" `734 
T G "uint_least32_t" 2 66 "int32" `735 
D G "INT_LEAST8_MAX" 2 75 " (127)"
D G "INT_LEAST8_MIN" 2 76 " (-128)"
D G "UINT_LEAST8_MAX" 2 77 " (255)"
D G "INT_LEAST16_MAX" 2 79 " (32767)"
D G "INT_LEAST16_MIN" 2 80 " (-32768)"
D G "UINT_LEAST16_MAX" 2 81 " (65535)"
D G "INT_LEAST32_MAX" 2 83 " (2147483647)"
D G "INT_LEAST32_MIN" 2 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 2 85 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_fast8_t" 2 112 "sint8" `736 
T G "uint_fast8_t" 2 113 "int8" `737 
D G "INT_FAST8_MAX" 2 114 " (127)"
D G "INT_FAST8_MIN" 2 115 " (-128)"
D G "UINT_FAST8_MAX" 2 116 " (255)"
T G "int_fast16_t" 2 117 "sint16" `738 
T G "uint_fast16_t" 2 118 "int16" `739 
T G "int_fast32_t" 2 121 "sint32" `740 
T G "uint_fast32_t" 2 122 "int32" `741 
D G "INT_FAST16_MAX" 2 124 " (32767)"
D G "INT_FAST16_MIN" 2 125 " (-32768)"
D G "UINT_FAST16_MAX" 2 126 " (65535)"
D G "INT_FAST32_MAX" 2 128 " (2147483647)"
D G "INT_FAST32_MIN" 2 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 2 130 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "uintptr_t" 2 148 "int16" `742 
T G "intptr_t" 2 149 "sint16" `743 
D G "INT8_C" 2 152 "(val) ((int8_t)val)"
D G "UINT8_C" 2 153 "(val) ((uint8_t)val)"
D G "INT16_C" 2 154 "(val) ((int16_t)val)"
D G "UINT16_C" 2 155 "(val) ((uint16_t)val)"
D G "INT32_C" 2 156 "(val) ((int32_t)val)"
D G "UINT32_C" 2 157 "(val) ((uint32_t)val)"
C L "jump_to_isr" 2 2 7 "FUNCTION"
D G "ENABLE_TABAN" 0 35 "PIN_E1"
D G "DIR_TABAN" 0 36 "PIN_A5"
D G "STEP_TABAN" 0 37 "PIN_E0"
D G "ENABLE_NEMA" 0 40 "PIN_A6"
D G "DIR_NEMA" 0 41 "PIN_E2"
D G "STEP_NEMA" 0 42 "PIN_A7"
D G "ENABLE_DIRSEK" 0 45 "PIN_A3"
D G "DIR_DIRSEK" 0 46 "PIN_A0"
D G "STEP_DIRSEK" 0 47 "PIN_A2"
D G "ENABLE_BILEK" 0 50 "PIN_B5"
D G "DIR_BILEK" 0 51 "PIN_B2"
D G "STEP_BILEK" 0 52 "PIN_B4"
D G "ENABLE_EL" 0 55 "PIN_B1"
D G "DIR_EL" 0 56 "PIN_D7"
D G "STEP_EL" 0 57 "PIN_B0"
D G "LEFT" 0 61 "0"
D G "RIGHT" 0 62 "1"
C L "jump_to_isr" 0 9 1 "FUNCTION"
V G "rec_fl" 0 66 "int8" `748 
V G "i" 0 66 "int8" `749 
V G "bsk" 0 66 "int8" `750 
V G "ply_fl" 0 66 "int8" `751 
V G "clfl" 0 66 "int8" `752 
V G "home_fl" 0 66 "int8" `753 
V G "c7_fl" 0 66 "int8" `754 
V G "clfl_fl" 0 66 "int8" `755 
V G "reset_fl" 0 66 "int8" `756 
V G "x" 0 67 "sint32" `757 
V G "y1" 0 67 "sint32" `758 
V G "y2" 0 67 "sint32" `759 
V G "y3" 0 67 "sint32" `760 
V G "z" 0 67 "sint32" `761 
V G "dif_x" 0 67 "sint32" `762 
V G "a" 0 67 "sint32" `763 
V G "b" 0 67 "sint32" `764 
V G "dif_x_new" 0 67 "sint32" `765 
V G "pulseX" 0 67 "sint32" `766 
V G "pulseY1" 0 67 "sint32" `767 
V G "dif_y1" 0 67 "sint32" `768 
V G "dif_y1_new" 0 67 "sint32" `769 
V G "pulseY2" 0 67 "sint32" `770 
V G "dif_y2" 0 67 "sint32" `771 
V G "dif_y2_new" 0 67 "sint32" `772 
V G "pulseY3" 0 67 "sint32" `773 
V G "dif_y3" 0 67 "sint32" `774 
V G "dif_y3_new" 0 67 "sint32" `775 
V G "pulseZ" 0 67 "sint32" `776 
V G "dif_z" 0 67 "sint32" `777 
V G "dif_z_new" 0 67 "sint32" `778 
V G "hafiza" 0 68 "sint32[10][1][5]" `779 
C L "jump_to_isr" 0 9 1 "FUNCTION"
F N "moveMotorTaban" 0 72 ""
V L "direction" 0 72 "int8" `783 
F G "moveMotorTaban" 0 73 "void(int8 direction)" `782 
C L "moveMotorTaban" 0 9 1 "FUNCTION"
C L "moveMotorTaban" 0 9 1 "FUNCTION"
C L "moveMotorTaban" 0 9 1 "FUNCTION"
C L "moveMotorTaban" 0 9 1 "FUNCTION"
C L "moveMotorTaban" 0 9 1 "FUNCTION"
C L "moveMotorTaban" 0 9 1 "FUNCTION"
F N "moveMotorNema" 0 92 ""
V L "direction" 0 92 "int8" `785 
F G "moveMotorNema" 0 93 "void(int8 direction)" `784 
C L "moveMotorNema" 0 9 1 "FUNCTION"
C L "moveMotorNema" 0 9 1 "FUNCTION"
C L "moveMotorNema" 0 9 1 "FUNCTION"
C L "moveMotorNema" 0 9 1 "FUNCTION"
C L "moveMotorNema" 0 9 1 "FUNCTION"
C L "moveMotorNema" 0 9 1 "FUNCTION"
F N "moveMotorDirsek" 0 112 ""
V L "direction" 0 112 "int8" `787 
F G "moveMotorDirsek" 0 113 "void(int8 direction)" `786 
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
C L "moveMotorDirsek" 0 9 1 "FUNCTION"
F N "moveMotorBilek" 0 132 ""
V L "direction" 0 132 "int8" `789 
F G "moveMotorBilek" 0 133 "void(int8 direction)" `788 
C L "moveMotorBilek" 0 9 1 "FUNCTION"
C L "moveMotorBilek" 0 9 1 "FUNCTION"
C L "moveMotorBilek" 0 9 1 "FUNCTION"
C L "moveMotorBilek" 0 9 1 "FUNCTION"
C L "moveMotorBilek" 0 9 1 "FUNCTION"
C L "moveMotorBilek" 0 9 1 "FUNCTION"
F N "moveMotorEl" 0 152 ""
V L "direction" 0 152 "int8" `791 
F G "moveMotorEl" 0 153 "void(int8 direction)" `790 
C L "moveMotorEl" 0 9 1 "FUNCTION"
C L "moveMotorEl" 0 9 1 "FUNCTION"
C L "moveMotorEl" 0 9 1 "FUNCTION"
C L "moveMotorEl" 0 9 1 "FUNCTION"
C L "moveMotorEl" 0 9 1 "FUNCTION"
C L "moveMotorEl" 0 9 1 "FUNCTION"
F N "resetMoves" 0 173 ""
F G "resetMoves" 0 174 "void()" `792 
C L "playMoves" 0 9 1 "FUNCTION"
F N "playMoves" 0 240 ""
F G "playMoves" 0 240 "void()" `793 
C L "playMoves" 0 9 2 "FUNCTION"
C L "playMoves" 0 9 4 "FUNCTION"
C L "playMoves" 0 9 4 "FUNCTION"
C L "playMoves" 0 9 7 "FUNCTION"
F N "MAIN" 0 423 ""
F G "MAIN" 0 424 "void()" `794 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
V L "joystick_taban" 0 466 "int16_t" `797 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
V L "joystick_nema" 0 471 "int16_t" `798 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
V L "joystick_dirsek" 0 476 "int16_t" `799 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
V L "joystick_bilek" 0 481 "int16_t" `800 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
V L "joystick_el" 0 486 "int16_t" `801 
C L "MAIN" 0 9 2 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
