CCS PCH C Compiler, Version 5.081, 43599               04-Haz-23 22:29

               Filename:   C:\Users\emreo\OneDrive\Masaüstü\Roboticarm\roboticarm.lst

               ROM used:   4796 bytes (7%)
                           Largest free fragment is 60740
               RAM used:   315 (8%) at main() level
                           315 (8%) worst case
               Stack used: 3 locations
               Stack size: 31

*
00000:  GOTO   0C18
.................... #include <18f46k22.h> 
.................... //////////// Standard Header file for the PIC18F46K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F46K22 
....................  
.................... #list 
....................  
.................... #device *=16 
.................... #device adc=10 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... #if defined(__PCD__) 
....................    typedef unsigned int32 uintptr_t; 
....................    typedef signed int32 intptr_t; 
.................... #else 
....................    typedef unsigned int16 uintptr_t; 
....................    typedef signed int16 intptr_t; 
.................... #endif 
....................  
.................... #define INT8_C(val) ((int8_t)val) 
.................... #define UINT8_C(val) ((uint8_t)val) 
.................... #define INT16_C(val) ((int16_t)val) 
.................... #define UINT16_C(val) ((uint16_t)val) 
.................... #define INT32_C(val) ((int32_t)val) 
.................... #define UINT32_C(val) ((uint32_t)val) 
....................  
.................... #if defined(__PCD__) 
.................... #define INT64_C(val) ((int64_t)val) 
.................... #define UINT64_C(val) ((uint64_t)val) 
.................... #endif 
....................  
.................... /// TODO: 
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #fuses INTRC_IO                  //use internal osc (yes !!)  
.................... //#fuses PLLEN                     // Phase lock loop enable 
.................... #FUSES NOMCLR                    //Master Clear pin disabled,pin 1( RE3 available !)  
.................... #FUSES NOWDT                     //No Watch Dog Timer  
.................... #FUSES NOBROWNOUT                // brownout reset  
.................... #FUSES NOPUT                     //No Power Up Timer  
.................... #FUSES NODEBUG                   //No Debug mode for ICD  
.................... #FUSES PROTECT                   //Code protected from reading  
.................... #FUSES CPD                       //EE protection  
.................... #FUSES WRT                       //Program memory write protected  
.................... #FUSES NOWRTD                      //Data EEPROM write protected  
.................... #FUSES NOWRTB                      //Boot block write protected  
.................... #FUSES NOEBTR                      //Memory protected from table reads  
.................... #FUSES NOEBTRB                     //Boot block protected from table reads  
.................... #FUSES CPB                       //Boot Block code protection  
.................... #FUSES WRTC                      //configuration not registers write protected  
.................... #FUSES NOFCMEN                   //Fail-safe clock monitor enabled  
.................... #FUSES NOSTVREN                  //Stack full/underflow will cause reset  
.................... #FUSES NOIESO                    //Internal External Switch Over mode enabled  
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #use delay(clock=64000000)  
00004:  MOVLW  01
00006:  MOVLB  1
00008:  SUBWF  x39,F
0000A:  BTFSS  FD8.0
0000C:  GOTO   002C
00010:  MOVLW  01
00012:  MOVWF  FEA
00014:  MOVLW  39
00016:  MOVWF  FE9
00018:  MOVF   FEF,W
0001A:  BTFSC  FD8.2
0001C:  GOTO   002C
00020:  MOVLW  04
00022:  MOVWF  00
00024:  DECFSZ 00,F
00026:  BRA    0024
00028:  DECFSZ FEF,F
0002A:  BRA    0020
0002C:  MOVLB  0
0002E:  RETURN 0
*
002C6:  MOVLW  01
002C8:  MOVWF  FEA
002CA:  MOVLW  38
002CC:  MOVWF  FE9
002CE:  MOVF   FEF,W
002D0:  BZ    02EE
002D2:  MOVLW  14
002D4:  MOVWF  01
002D6:  CLRF   00
002D8:  DECFSZ 00,F
002DA:  BRA    02D8
002DC:  DECFSZ 01,F
002DE:  BRA    02D6
002E0:  MOVLW  BF
002E2:  MOVWF  00
002E4:  DECFSZ 00,F
002E6:  BRA    02E4
002E8:  BRA    02EA
002EA:  DECFSZ FEF,F
002EC:  BRA    02D2
002EE:  RETURN 0
....................   
.................... #use fast_io(b) // Port yönlendirme komutlarý b portu için geçerli 
.................... #use fast_io(c) // Port yönlendirme komutlarý b portu için geçerli 
.................... #use fast_io(d) // Port yönlendirme komutlarý b portu için geçerli 
.................... #use fast_io(a) // Port yönlendirme komutlarý b portu için geçerli 
.................... // Motor sürücü pini tanýmlamalarý 
.................... #define ENABLE_TABAN PIN_E1 
.................... #define DIR_TABAN PIN_A5 
.................... #define STEP_TABAN PIN_E0 
....................  
.................... // Motor sürücü pini tanýmlamalarý 
.................... #define ENABLE_NEMA PIN_A6 
.................... #define DIR_NEMA PIN_E2 
.................... #define STEP_NEMA PIN_A7 
....................  
.................... // Motor sürücü pini tanýmlamalarý 
.................... #define ENABLE_DIRSEK PIN_A3 
.................... #define DIR_DIRSEK PIN_A0 
.................... #define STEP_DIRSEK PIN_A2 
....................  
.................... // Motor sürücü pini tanýmlamalarý 
.................... #define ENABLE_BILEK PIN_B5 
.................... #define DIR_BILEK PIN_B2 
.................... #define STEP_BILEK PIN_B4 
....................  
.................... // Motor sürücü pini tanýmlamalarý 
.................... #define ENABLE_EL PIN_B1 
.................... #define DIR_EL PIN_D7 
.................... #define STEP_EL PIN_B0 
....................  
....................  
.................... // Hareket komutlarý 
.................... #define LEFT 0 
.................... #define RIGHT 1 
....................  
....................  
.................... // Hareketleri kaydetmek için dizi 
.................... int rec_fl=0,i=0,bsk=0,ply_fl=0,clfl=0,home_fl=0,c7_fl=0,clfl_fl=0,reset_fl=0; 
.................... signed int32 x=0, y1=0, y2=0, y3=0, z=0, dif_x=0, a=0,b=0,dif_x_new=0,pulseX=0,pulseY1=0,dif_y1=0,dif_y1_new=0,pulseY2=0,dif_y2=0,dif_y2_new=0,pulseY3=0,dif_y3=0,dif_y3_new=0,pulseZ=0,dif_z=0,dif_z_new=0; 
.................... signed int32 hafiza[10][1][5]={{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; 
.................... //sütun satýr içerik 
....................  
....................  
.................... void moveMotorTaban(int direction) 
.................... { 
....................    if(direction==LEFT){ 
*
00030:  MOVLB  1
00032:  MOVF   x37,F
00034:  BNZ   0074
....................       output_high(DIR_TABAN);  // Yön ayarlamasý 
00036:  BSF    F89.5
....................       output_high(STEP_TABAN);           // Adým sinyalini yüksek seviyeye ayarla 
00038:  BCF    F96.0
0003A:  BSF    F8D.0
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0003C:  MOVLW  02
0003E:  MOVWF  x38
00040:  MOVLW  96
00042:  MOVWF  x39
00044:  MOVLB  0
00046:  RCALL  0004
00048:  MOVLB  1
0004A:  DECFSZ x38,F
0004C:  BRA    0040
....................       output_low(STEP_TABAN);  
0004E:  BCF    F96.0
00050:  BCF    F8D.0
....................       x++; 
00052:  MOVLW  01
00054:  ADDWF  0D,F
00056:  BTFSC  FD8.0
00058:  INCF   0E,F
0005A:  BTFSC  FD8.2
0005C:  INCF   0F,F
0005E:  BTFSC  FD8.2
00060:  INCF   10,F
....................       delay_us(300); 
00062:  MOVLW  02
00064:  MOVWF  x38
00066:  MOVLW  96
00068:  MOVWF  x39
0006A:  MOVLB  0
0006C:  RCALL  0004
0006E:  MOVLB  1
00070:  DECFSZ x38,F
00072:  BRA    0066
....................    } 
....................    if(direction==RIGHT){ 
00074:  DECFSZ x37,W
00076:  BRA    00B6
....................       output_low(DIR_TABAN);  // Yön ayarlamasý 
00078:  BCF    F89.5
....................       output_high(STEP_TABAN);           // Adým sinyalini yüksek seviyeye ayarla 
0007A:  BCF    F96.0
0007C:  BSF    F8D.0
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0007E:  MOVLW  02
00080:  MOVWF  x38
00082:  MOVLW  96
00084:  MOVWF  x39
00086:  MOVLB  0
00088:  RCALL  0004
0008A:  MOVLB  1
0008C:  DECFSZ x38,F
0008E:  BRA    0082
....................       output_low(STEP_TABAN);  
00090:  BCF    F96.0
00092:  BCF    F8D.0
....................       x--; 
00094:  MOVLW  FF
00096:  ADDWF  0D,F
00098:  BTFSS  FD8.0
0009A:  ADDWF  0E,F
0009C:  BTFSS  FD8.0
0009E:  ADDWF  0F,F
000A0:  BTFSS  FD8.0
000A2:  ADDWF  10,F
....................       delay_us(300); 
000A4:  MOVLW  02
000A6:  MOVWF  x38
000A8:  MOVLW  96
000AA:  MOVWF  x39
000AC:  MOVLB  0
000AE:  RCALL  0004
000B0:  MOVLB  1
000B2:  DECFSZ x38,F
000B4:  BRA    00A8
....................    } 
000B6:  MOVLB  0
000B8:  RETURN 0
.................... } 
....................  
.................... void moveMotorNema(int direction) 
.................... { 
....................    if(direction==LEFT){ 
000BA:  MOVLB  1
000BC:  MOVF   x37,F
000BE:  BNZ   00FC
....................       output_high(DIR_NEMA);  // Yön ayarlamasý 
000C0:  BCF    F96.2
000C2:  BSF    F8D.2
....................       output_high(STEP_NEMA);           // Adým sinyalini yüksek seviyeye ayarla 
000C4:  BSF    F89.7
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
000C6:  MOVLW  02
000C8:  MOVWF  x38
000CA:  MOVLW  96
000CC:  MOVWF  x39
000CE:  MOVLB  0
000D0:  RCALL  0004
000D2:  MOVLB  1
000D4:  DECFSZ x38,F
000D6:  BRA    00CA
....................       output_low(STEP_NEMA);  
000D8:  BCF    F89.7
....................       y1++; 
000DA:  MOVLW  01
000DC:  ADDWF  11,F
000DE:  BTFSC  FD8.0
000E0:  INCF   12,F
000E2:  BTFSC  FD8.2
000E4:  INCF   13,F
000E6:  BTFSC  FD8.2
000E8:  INCF   14,F
....................       delay_us(300); 
000EA:  MOVLW  02
000EC:  MOVWF  x38
000EE:  MOVLW  96
000F0:  MOVWF  x39
000F2:  MOVLB  0
000F4:  RCALL  0004
000F6:  MOVLB  1
000F8:  DECFSZ x38,F
000FA:  BRA    00EE
....................    } 
....................    if(direction==RIGHT){ 
000FC:  DECFSZ x37,W
000FE:  BRA    013C
....................       output_low(DIR_NEMA);  // Yön ayarlamasý 
00100:  BCF    F96.2
00102:  BCF    F8D.2
....................       output_high(STEP_NEMA);           // Adým sinyalini yüksek seviyeye ayarla 
00104:  BSF    F89.7
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
00106:  MOVLW  02
00108:  MOVWF  x38
0010A:  MOVLW  96
0010C:  MOVWF  x39
0010E:  MOVLB  0
00110:  RCALL  0004
00112:  MOVLB  1
00114:  DECFSZ x38,F
00116:  BRA    010A
....................       output_low(STEP_NEMA);  
00118:  BCF    F89.7
....................       y1--; 
0011A:  MOVLW  FF
0011C:  ADDWF  11,F
0011E:  BTFSS  FD8.0
00120:  ADDWF  12,F
00122:  BTFSS  FD8.0
00124:  ADDWF  13,F
00126:  BTFSS  FD8.0
00128:  ADDWF  14,F
....................       delay_us(300); 
0012A:  MOVLW  02
0012C:  MOVWF  x38
0012E:  MOVLW  96
00130:  MOVWF  x39
00132:  MOVLB  0
00134:  RCALL  0004
00136:  MOVLB  1
00138:  DECFSZ x38,F
0013A:  BRA    012E
....................    } 
0013C:  MOVLB  0
0013E:  RETURN 0
.................... } 
....................  
.................... void moveMotorDirsek(int direction) 
.................... { 
....................    if(direction==LEFT){ 
00140:  MOVLB  1
00142:  MOVF   x37,F
00144:  BNZ   0180
....................       output_high(DIR_DIRSEK);  // Yön ayarlamasý 
00146:  BSF    F89.0
....................       output_high(STEP_DIRSEK);           // Adým sinyalini yüksek seviyeye ayarla 
00148:  BSF    F89.2
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0014A:  MOVLW  02
0014C:  MOVWF  x38
0014E:  MOVLW  96
00150:  MOVWF  x39
00152:  MOVLB  0
00154:  RCALL  0004
00156:  MOVLB  1
00158:  DECFSZ x38,F
0015A:  BRA    014E
....................       output_low(STEP_DIRSEK);  
0015C:  BCF    F89.2
....................       y2++; 
0015E:  MOVLW  01
00160:  ADDWF  15,F
00162:  BTFSC  FD8.0
00164:  INCF   16,F
00166:  BTFSC  FD8.2
00168:  INCF   17,F
0016A:  BTFSC  FD8.2
0016C:  INCF   18,F
....................       delay_us(300); 
0016E:  MOVLW  02
00170:  MOVWF  x38
00172:  MOVLW  96
00174:  MOVWF  x39
00176:  MOVLB  0
00178:  RCALL  0004
0017A:  MOVLB  1
0017C:  DECFSZ x38,F
0017E:  BRA    0172
....................    } 
....................    if(direction==RIGHT){ 
00180:  DECFSZ x37,W
00182:  BRA    01BE
....................       output_low(DIR_DIRSEK);  // Yön ayarlamasý 
00184:  BCF    F89.0
....................       output_high(STEP_DIRSEK);           // Adým sinyalini yüksek seviyeye ayarla 
00186:  BSF    F89.2
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
00188:  MOVLW  02
0018A:  MOVWF  x38
0018C:  MOVLW  96
0018E:  MOVWF  x39
00190:  MOVLB  0
00192:  RCALL  0004
00194:  MOVLB  1
00196:  DECFSZ x38,F
00198:  BRA    018C
....................       output_low(STEP_DIRSEK);  
0019A:  BCF    F89.2
....................       y2--; 
0019C:  MOVLW  FF
0019E:  ADDWF  15,F
001A0:  BTFSS  FD8.0
001A2:  ADDWF  16,F
001A4:  BTFSS  FD8.0
001A6:  ADDWF  17,F
001A8:  BTFSS  FD8.0
001AA:  ADDWF  18,F
....................       delay_us(300); 
001AC:  MOVLW  02
001AE:  MOVWF  x38
001B0:  MOVLW  96
001B2:  MOVWF  x39
001B4:  MOVLB  0
001B6:  RCALL  0004
001B8:  MOVLB  1
001BA:  DECFSZ x38,F
001BC:  BRA    01B0
....................    } 
001BE:  MOVLB  0
001C0:  RETURN 0
.................... } 
....................  
.................... void moveMotorBilek(int direction) 
.................... { 
....................    if(direction==LEFT){ 
001C2:  MOVLB  1
001C4:  MOVF   x37,F
001C6:  BNZ   0202
....................       output_high(DIR_BILEK);  // Yön ayarlamasý 
001C8:  BSF    F8A.2
....................       output_high(STEP_BILEK);           // Adým sinyalini yüksek seviyeye ayarla 
001CA:  BSF    F8A.4
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
001CC:  MOVLW  02
001CE:  MOVWF  x38
001D0:  MOVLW  96
001D2:  MOVWF  x39
001D4:  MOVLB  0
001D6:  RCALL  0004
001D8:  MOVLB  1
001DA:  DECFSZ x38,F
001DC:  BRA    01D0
....................       output_low(STEP_BILEK);  
001DE:  BCF    F8A.4
....................       y3++; 
001E0:  MOVLW  01
001E2:  ADDWF  19,F
001E4:  BTFSC  FD8.0
001E6:  INCF   1A,F
001E8:  BTFSC  FD8.2
001EA:  INCF   1B,F
001EC:  BTFSC  FD8.2
001EE:  INCF   1C,F
....................       delay_us(300); 
001F0:  MOVLW  02
001F2:  MOVWF  x38
001F4:  MOVLW  96
001F6:  MOVWF  x39
001F8:  MOVLB  0
001FA:  RCALL  0004
001FC:  MOVLB  1
001FE:  DECFSZ x38,F
00200:  BRA    01F4
....................    } 
....................    if(direction==RIGHT){ 
00202:  DECFSZ x37,W
00204:  BRA    0240
....................       output_low(DIR_BILEK);  // Yön ayarlamasý 
00206:  BCF    F8A.2
....................       output_high(STEP_BILEK);           // Adým sinyalini yüksek seviyeye ayarla 
00208:  BSF    F8A.4
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0020A:  MOVLW  02
0020C:  MOVWF  x38
0020E:  MOVLW  96
00210:  MOVWF  x39
00212:  MOVLB  0
00214:  RCALL  0004
00216:  MOVLB  1
00218:  DECFSZ x38,F
0021A:  BRA    020E
....................       output_low(STEP_BILEK);  
0021C:  BCF    F8A.4
....................       y3--; 
0021E:  MOVLW  FF
00220:  ADDWF  19,F
00222:  BTFSS  FD8.0
00224:  ADDWF  1A,F
00226:  BTFSS  FD8.0
00228:  ADDWF  1B,F
0022A:  BTFSS  FD8.0
0022C:  ADDWF  1C,F
....................       delay_us(300); 
0022E:  MOVLW  02
00230:  MOVWF  x38
00232:  MOVLW  96
00234:  MOVWF  x39
00236:  MOVLB  0
00238:  RCALL  0004
0023A:  MOVLB  1
0023C:  DECFSZ x38,F
0023E:  BRA    0232
....................    } 
00240:  MOVLB  0
00242:  RETURN 0
.................... } 
....................  
.................... void moveMotorEl(int direction) 
.................... { 
....................    if(direction==LEFT){ 
00244:  MOVLB  1
00246:  MOVF   x37,F
00248:  BNZ   0284
....................       output_high(DIR_EL);  // Yön ayarlamasý 
0024A:  BSF    F8C.7
....................       output_high(STEP_EL);           // Adým sinyalini yüksek seviyeye ayarla 
0024C:  BSF    F8A.0
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0024E:  MOVLW  02
00250:  MOVWF  x38
00252:  MOVLW  96
00254:  MOVWF  x39
00256:  MOVLB  0
00258:  RCALL  0004
0025A:  MOVLB  1
0025C:  DECFSZ x38,F
0025E:  BRA    0252
....................       output_low(STEP_EL);  
00260:  BCF    F8A.0
....................       z++; 
00262:  MOVLW  01
00264:  ADDWF  1D,F
00266:  BTFSC  FD8.0
00268:  INCF   1E,F
0026A:  BTFSC  FD8.2
0026C:  INCF   1F,F
0026E:  BTFSC  FD8.2
00270:  INCF   20,F
....................       delay_us(300); 
00272:  MOVLW  02
00274:  MOVWF  x38
00276:  MOVLW  96
00278:  MOVWF  x39
0027A:  MOVLB  0
0027C:  RCALL  0004
0027E:  MOVLB  1
00280:  DECFSZ x38,F
00282:  BRA    0276
....................    } 
....................    if(direction==RIGHT){ 
00284:  DECFSZ x37,W
00286:  BRA    02C2
....................       output_low(DIR_EL);  // Yön ayarlamasý 
00288:  BCF    F8C.7
....................       output_high(STEP_EL);           // Adým sinyalini yüksek seviyeye ayarla 
0028A:  BSF    F8A.0
....................       delay_us(300);                    // Adým sinyalini 10ms boyunca yüksek seviyede tut 
0028C:  MOVLW  02
0028E:  MOVWF  x38
00290:  MOVLW  96
00292:  MOVWF  x39
00294:  MOVLB  0
00296:  RCALL  0004
00298:  MOVLB  1
0029A:  DECFSZ x38,F
0029C:  BRA    0290
....................       output_low(STEP_EL);  
0029E:  BCF    F8A.0
....................       z--; 
002A0:  MOVLW  FF
002A2:  ADDWF  1D,F
002A4:  BTFSS  FD8.0
002A6:  ADDWF  1E,F
002A8:  BTFSS  FD8.0
002AA:  ADDWF  1F,F
002AC:  BTFSS  FD8.0
002AE:  ADDWF  20,F
....................       delay_us(300); 
002B0:  MOVLW  02
002B2:  MOVWF  x38
002B4:  MOVLW  96
002B6:  MOVWF  x39
002B8:  MOVLB  0
002BA:  RCALL  0004
002BC:  MOVLB  1
002BE:  DECFSZ x38,F
002C0:  BRA    02B4
....................    } 
002C2:  MOVLB  0
002C4:  RETURN 0
.................... } 
....................  
....................  
.................... void resetMoves() 
.................... { 
....................       pulseX=0-x; 
*
002F0:  COMF   0D,W
002F2:  MOVWF  31
002F4:  COMF   0E,W
002F6:  MOVWF  32
002F8:  COMF   0F,W
002FA:  MOVWF  33
002FC:  COMF   10,W
002FE:  MOVWF  34
00300:  INCF   31,F
00302:  BTFSC  FD8.2
00304:  INCF   32,F
00306:  BTFSC  FD8.2
00308:  INCF   33,F
0030A:  BTFSC  FD8.2
0030C:  INCF   34,F
....................       pulseY1=0-y1; 
0030E:  COMF   11,W
00310:  MOVWF  35
00312:  COMF   12,W
00314:  MOVWF  36
00316:  COMF   13,W
00318:  MOVWF  37
0031A:  COMF   14,W
0031C:  MOVWF  38
0031E:  INCF   35,F
00320:  BTFSC  FD8.2
00322:  INCF   36,F
00324:  BTFSC  FD8.2
00326:  INCF   37,F
00328:  BTFSC  FD8.2
0032A:  INCF   38,F
....................       pulseY2=0-y2; 
0032C:  COMF   15,W
0032E:  MOVWF  41
00330:  COMF   16,W
00332:  MOVWF  42
00334:  COMF   17,W
00336:  MOVWF  43
00338:  COMF   18,W
0033A:  MOVWF  44
0033C:  INCF   41,F
0033E:  BTFSC  FD8.2
00340:  INCF   42,F
00342:  BTFSC  FD8.2
00344:  INCF   43,F
00346:  BTFSC  FD8.2
00348:  INCF   44,F
....................       pulseY3=0-y3; 
0034A:  COMF   19,W
0034C:  MOVWF  4D
0034E:  COMF   1A,W
00350:  MOVWF  4E
00352:  COMF   1B,W
00354:  MOVWF  4F
00356:  COMF   1C,W
00358:  MOVWF  50
0035A:  INCF   4D,F
0035C:  BTFSC  FD8.2
0035E:  INCF   4E,F
00360:  BTFSC  FD8.2
00362:  INCF   4F,F
00364:  BTFSC  FD8.2
00366:  INCF   50,F
....................       pulseZ=0-z; 
00368:  COMF   1D,W
0036A:  MOVWF  59
0036C:  COMF   1E,W
0036E:  MOVWF  5A
00370:  COMF   1F,W
00372:  MOVWF  5B
00374:  COMF   20,W
00376:  MOVWF  5C
00378:  INCF   59,F
0037A:  BTFSC  FD8.2
0037C:  INCF   5A,F
0037E:  BTFSC  FD8.2
00380:  INCF   5B,F
00382:  BTFSC  FD8.2
00384:  INCF   5C,F
....................        
....................       if(pulseX>0){ 
00386:  BTFSC  34.7
00388:  BRA    03A4
0038A:  MOVF   34,F
0038C:  BNZ   039C
0038E:  MOVF   33,F
00390:  BNZ   039C
00392:  MOVF   32,F
00394:  BNZ   039C
00396:  MOVF   31,W
00398:  SUBLW  00
0039A:  BC    03A4
....................          moveMotorTaban(LEFT); 
0039C:  MOVLB  1
0039E:  CLRF   x37
003A0:  MOVLB  0
003A2:  RCALL  0030
....................       } 
....................       if(pulseX<0){ 
003A4:  BTFSS  34.7
003A6:  BRA    03B2
....................          moveMotorTaban(RIGHT); 
003A8:  MOVLW  01
003AA:  MOVLB  1
003AC:  MOVWF  x37
003AE:  MOVLB  0
003B0:  RCALL  0030
....................       } 
....................       if(pulseX==0){ 
003B2:  MOVF   31,F
003B4:  BNZ   03CA
003B6:  MOVF   32,F
003B8:  BNZ   03CA
003BA:  MOVF   33,F
003BC:  BNZ   03CA
003BE:  MOVF   34,F
003C0:  BNZ   03CA
....................          x=0; 
003C2:  CLRF   10
003C4:  CLRF   0F
003C6:  CLRF   0E
003C8:  CLRF   0D
....................       } 
....................       if(x==0){ 
003CA:  MOVF   0D,F
003CC:  BNZ   041E
003CE:  MOVF   0E,F
003D0:  BNZ   041E
003D2:  MOVF   0F,F
003D4:  BNZ   041E
003D6:  MOVF   10,F
003D8:  BNZ   041E
....................          if(pulseY1>0){ 
003DA:  BTFSC  38.7
003DC:  BRA    03F8
003DE:  MOVF   38,F
003E0:  BNZ   03F0
003E2:  MOVF   37,F
003E4:  BNZ   03F0
003E6:  MOVF   36,F
003E8:  BNZ   03F0
003EA:  MOVF   35,W
003EC:  SUBLW  00
003EE:  BC    03F8
....................             moveMotorNema(LEFT); 
003F0:  MOVLB  1
003F2:  CLRF   x37
003F4:  MOVLB  0
003F6:  RCALL  00BA
....................          } 
....................          if(pulseY1<0){ 
003F8:  BTFSS  38.7
003FA:  BRA    0406
....................             moveMotorNema(RIGHT); 
003FC:  MOVLW  01
003FE:  MOVLB  1
00400:  MOVWF  x37
00402:  MOVLB  0
00404:  RCALL  00BA
....................          } 
....................          if(pulseY1==0){ 
00406:  MOVF   35,F
00408:  BNZ   041E
0040A:  MOVF   36,F
0040C:  BNZ   041E
0040E:  MOVF   37,F
00410:  BNZ   041E
00412:  MOVF   38,F
00414:  BNZ   041E
....................             y1=0; 
00416:  CLRF   14
00418:  CLRF   13
0041A:  CLRF   12
0041C:  CLRF   11
....................          } 
....................       } 
....................       if(x==0 && y1==0){ 
0041E:  MOVF   0D,F
00420:  BNZ   0482
00422:  MOVF   0E,F
00424:  BNZ   0482
00426:  MOVF   0F,F
00428:  BNZ   0482
0042A:  MOVF   10,F
0042C:  BNZ   0482
0042E:  MOVF   11,F
00430:  BNZ   0482
00432:  MOVF   12,F
00434:  BNZ   0482
00436:  MOVF   13,F
00438:  BNZ   0482
0043A:  MOVF   14,F
0043C:  BNZ   0482
....................          if(pulseY2>0){ 
0043E:  BTFSC  44.7
00440:  BRA    045C
00442:  MOVF   44,F
00444:  BNZ   0454
00446:  MOVF   43,F
00448:  BNZ   0454
0044A:  MOVF   42,F
0044C:  BNZ   0454
0044E:  MOVF   41,W
00450:  SUBLW  00
00452:  BC    045C
....................             moveMotorDirsek(LEFT); 
00454:  MOVLB  1
00456:  CLRF   x37
00458:  MOVLB  0
0045A:  RCALL  0140
....................          } 
....................          if(pulseY2<0){ 
0045C:  BTFSS  44.7
0045E:  BRA    046A
....................             moveMotorDirsek(RIGHT); 
00460:  MOVLW  01
00462:  MOVLB  1
00464:  MOVWF  x37
00466:  MOVLB  0
00468:  RCALL  0140
....................          } 
....................          if(pulseY2==0){ 
0046A:  MOVF   41,F
0046C:  BNZ   0482
0046E:  MOVF   42,F
00470:  BNZ   0482
00472:  MOVF   43,F
00474:  BNZ   0482
00476:  MOVF   44,F
00478:  BNZ   0482
....................             y2=0; 
0047A:  CLRF   18
0047C:  CLRF   17
0047E:  CLRF   16
00480:  CLRF   15
....................          } 
....................       } 
....................        
....................       if(x==0 && y1==0 && y2==0){ 
00482:  MOVF   0D,F
00484:  BNZ   04F6
00486:  MOVF   0E,F
00488:  BNZ   04F6
0048A:  MOVF   0F,F
0048C:  BNZ   04F6
0048E:  MOVF   10,F
00490:  BNZ   04F6
00492:  MOVF   11,F
00494:  BNZ   04F6
00496:  MOVF   12,F
00498:  BNZ   04F6
0049A:  MOVF   13,F
0049C:  BNZ   04F6
0049E:  MOVF   14,F
004A0:  BNZ   04F6
004A2:  MOVF   15,F
004A4:  BNZ   04F6
004A6:  MOVF   16,F
004A8:  BNZ   04F6
004AA:  MOVF   17,F
004AC:  BNZ   04F6
004AE:  MOVF   18,F
004B0:  BNZ   04F6
....................          if(pulseY3>0){ 
004B2:  BTFSC  50.7
004B4:  BRA    04D0
004B6:  MOVF   50,F
004B8:  BNZ   04C8
004BA:  MOVF   4F,F
004BC:  BNZ   04C8
004BE:  MOVF   4E,F
004C0:  BNZ   04C8
004C2:  MOVF   4D,W
004C4:  SUBLW  00
004C6:  BC    04D0
....................             moveMotorBilek(LEFT); 
004C8:  MOVLB  1
004CA:  CLRF   x37
004CC:  MOVLB  0
004CE:  RCALL  01C2
....................          } 
....................          if(pulseY3<0){ 
004D0:  BTFSS  50.7
004D2:  BRA    04DE
....................             moveMotorBilek(RIGHT); 
004D4:  MOVLW  01
004D6:  MOVLB  1
004D8:  MOVWF  x37
004DA:  MOVLB  0
004DC:  RCALL  01C2
....................          } 
....................          if(pulseY3==0){ 
004DE:  MOVF   4D,F
004E0:  BNZ   04F6
004E2:  MOVF   4E,F
004E4:  BNZ   04F6
004E6:  MOVF   4F,F
004E8:  BNZ   04F6
004EA:  MOVF   50,F
004EC:  BNZ   04F6
....................             y3=0; 
004EE:  CLRF   1C
004F0:  CLRF   1B
004F2:  CLRF   1A
004F4:  CLRF   19
....................          } 
....................       } 
....................       if(x==0 && y1==0 && y2==0 && y3==0){ 
004F6:  MOVF   0D,F
004F8:  BNZ   0580
004FA:  MOVF   0E,F
004FC:  BNZ   0580
004FE:  MOVF   0F,F
00500:  BNZ   0580
00502:  MOVF   10,F
00504:  BNZ   0580
00506:  MOVF   11,F
00508:  BNZ   0580
0050A:  MOVF   12,F
0050C:  BNZ   0580
0050E:  MOVF   13,F
00510:  BNZ   0580
00512:  MOVF   14,F
00514:  BNZ   0580
00516:  MOVF   15,F
00518:  BNZ   0580
0051A:  MOVF   16,F
0051C:  BNZ   0580
0051E:  MOVF   17,F
00520:  BNZ   0580
00522:  MOVF   18,F
00524:  BNZ   0580
00526:  MOVF   19,F
00528:  BNZ   0580
0052A:  MOVF   1A,F
0052C:  BNZ   0580
0052E:  MOVF   1B,F
00530:  BNZ   0580
00532:  MOVF   1C,F
00534:  BNZ   0580
....................          if(pulseZ>0){ 
00536:  BTFSC  5C.7
00538:  BRA    0554
0053A:  MOVF   5C,F
0053C:  BNZ   054C
0053E:  MOVF   5B,F
00540:  BNZ   054C
00542:  MOVF   5A,F
00544:  BNZ   054C
00546:  MOVF   59,W
00548:  SUBLW  00
0054A:  BC    0554
....................             moveMotorEl(LEFT); 
0054C:  MOVLB  1
0054E:  CLRF   x37
00550:  MOVLB  0
00552:  RCALL  0244
....................          } 
....................          if(pulseZ<0){ 
00554:  BTFSS  5C.7
00556:  BRA    0562
....................             moveMotorEl(RIGHT); 
00558:  MOVLW  01
0055A:  MOVLB  1
0055C:  MOVWF  x37
0055E:  MOVLB  0
00560:  RCALL  0244
....................          } 
....................          if(pulseZ==0){ 
00562:  MOVF   59,F
00564:  BNZ   0580
00566:  MOVF   5A,F
00568:  BNZ   0580
0056A:  MOVF   5B,F
0056C:  BNZ   0580
0056E:  MOVF   5C,F
00570:  BNZ   0580
....................             home_fl=0; 
00572:  CLRF   09
....................             z=0; 
00574:  CLRF   20
00576:  CLRF   1F
00578:  CLRF   1E
0057A:  CLRF   1D
....................             reset_fl=1; 
0057C:  MOVLW  01
0057E:  MOVWF  0C
....................          } 
....................       } 
00580:  RETURN 0
.................... } 
....................  
.................... //!// Kaydedilen hareketleri tekrar etme fonksiyonu 
.................... void playMoves(){ 
....................    if(bsk==0){ 
00582:  MOVF   06,F
00584:  BTFSS  FD8.2
00586:  BRA    08C2
....................       if(clfl==0 && clfl_fl==0){ 
00588:  MOVF   08,F
0058A:  BNZ   067A
0058C:  MOVF   0B,F
0058E:  BNZ   067A
....................          dif_x = 0-hafiza[0][0][0]; 
00590:  COMF   x65,W
00592:  MOVWF  21
00594:  COMF   x66,W
00596:  MOVWF  22
00598:  COMF   x67,W
0059A:  MOVWF  23
0059C:  COMF   x68,W
0059E:  MOVWF  24
005A0:  INCF   21,F
005A2:  BTFSC  FD8.2
005A4:  INCF   22,F
005A6:  BTFSC  FD8.2
005A8:  INCF   23,F
005AA:  BTFSC  FD8.2
005AC:  INCF   24,F
....................          dif_x_new = dif_x; 
005AE:  MOVFF  24,30
005B2:  MOVFF  23,2F
005B6:  MOVFF  22,2E
005BA:  MOVFF  21,2D
....................           
....................          dif_y1 = 0-hafiza[0][0][1]; 
005BE:  COMF   x69,W
005C0:  MOVWF  39
005C2:  COMF   x6A,W
005C4:  MOVWF  3A
005C6:  COMF   x6B,W
005C8:  MOVWF  3B
005CA:  COMF   x6C,W
005CC:  MOVWF  3C
005CE:  INCF   39,F
005D0:  BTFSC  FD8.2
005D2:  INCF   3A,F
005D4:  BTFSC  FD8.2
005D6:  INCF   3B,F
005D8:  BTFSC  FD8.2
005DA:  INCF   3C,F
....................          dif_y1_new = dif_y1; 
005DC:  MOVFF  3C,40
005E0:  MOVFF  3B,3F
005E4:  MOVFF  3A,3E
005E8:  MOVFF  39,3D
....................           
....................          dif_y2 = 0-hafiza[0][0][2]; 
005EC:  COMF   x6D,W
005EE:  MOVWF  45
005F0:  COMF   x6E,W
005F2:  MOVWF  46
005F4:  COMF   x6F,W
005F6:  MOVWF  47
005F8:  COMF   x70,W
005FA:  MOVWF  48
005FC:  INCF   45,F
005FE:  BTFSC  FD8.2
00600:  INCF   46,F
00602:  BTFSC  FD8.2
00604:  INCF   47,F
00606:  BTFSC  FD8.2
00608:  INCF   48,F
....................          dif_y2_new = dif_y2; 
0060A:  MOVFF  48,4C
0060E:  MOVFF  47,4B
00612:  MOVFF  46,4A
00616:  MOVFF  45,49
....................           
....................          dif_y3 = 0-hafiza[0][0][3]; 
0061A:  COMF   x71,W
0061C:  MOVWF  51
0061E:  COMF   x72,W
00620:  MOVWF  52
00622:  COMF   x73,W
00624:  MOVWF  53
00626:  COMF   x74,W
00628:  MOVWF  54
0062A:  INCF   51,F
0062C:  BTFSC  FD8.2
0062E:  INCF   52,F
00630:  BTFSC  FD8.2
00632:  INCF   53,F
00634:  BTFSC  FD8.2
00636:  INCF   54,F
....................          dif_y3_new = dif_y3; 
00638:  MOVFF  54,58
0063C:  MOVFF  53,57
00640:  MOVFF  52,56
00644:  MOVFF  51,55
....................           
....................          dif_z = 0-hafiza[0][0][4]; 
00648:  COMF   x75,W
0064A:  MOVWF  5D
0064C:  COMF   x76,W
0064E:  MOVWF  5E
00650:  COMF   x77,W
00652:  MOVWF  5F
00654:  COMF   x78,W
00656:  MOVWF  x60
00658:  INCF   5D,F
0065A:  BTFSC  FD8.2
0065C:  INCF   5E,F
0065E:  BTFSC  FD8.2
00660:  INCF   5F,F
00662:  BTFSC  FD8.2
00664:  INCF   x60,F
....................          dif_z_new = dif_z; 
00666:  MOVFF  60,64
0066A:  MOVFF  5F,63
0066E:  MOVFF  5E,62
00672:  MOVFF  5D,61
....................          clfl=1; 
00676:  MOVLW  01
00678:  MOVWF  08
....................           
....................       } 
....................        
....................       if(dif_x_new < 0){ 
0067A:  BTFSS  30.7
0067C:  BRA    0696
....................          moveMotorTaban(LEFT); 
0067E:  MOVLB  1
00680:  CLRF   x37
00682:  MOVLB  0
00684:  RCALL  0030
....................          dif_x_new++; 
00686:  MOVLW  01
00688:  ADDWF  2D,F
0068A:  BTFSC  FD8.0
0068C:  INCF   2E,F
0068E:  BTFSC  FD8.2
00690:  INCF   2F,F
00692:  BTFSC  FD8.2
00694:  INCF   30,F
....................       } 
....................       if(dif_x_new > 0){ 
00696:  BTFSC  30.7
00698:  BRA    06C6
0069A:  MOVF   30,F
0069C:  BNZ   06AC
0069E:  MOVF   2F,F
006A0:  BNZ   06AC
006A2:  MOVF   2E,F
006A4:  BNZ   06AC
006A6:  MOVF   2D,W
006A8:  SUBLW  00
006AA:  BC    06C6
....................          moveMotorTaban(RIGHT); 
006AC:  MOVLW  01
006AE:  MOVLB  1
006B0:  MOVWF  x37
006B2:  MOVLB  0
006B4:  RCALL  0030
....................          dif_x_new--; 
006B6:  MOVLW  FF
006B8:  ADDWF  2D,F
006BA:  BTFSS  FD8.0
006BC:  ADDWF  2E,F
006BE:  BTFSS  FD8.0
006C0:  ADDWF  2F,F
006C2:  BTFSS  FD8.0
006C4:  ADDWF  30,F
....................       } 
.................... //!      if(dif_x_new == 0){ 
.................... //! 
.................... //!      } 
....................       if(dif_x_new==0){ 
006C6:  MOVF   2D,F
006C8:  BNZ   0722
006CA:  MOVF   2E,F
006CC:  BNZ   0722
006CE:  MOVF   2F,F
006D0:  BNZ   0722
006D2:  MOVF   30,F
006D4:  BNZ   0722
....................          if(dif_y1_new < 0){ 
006D6:  BTFSS  40.7
006D8:  BRA    06F2
....................             moveMotorNema(LEFT); 
006DA:  MOVLB  1
006DC:  CLRF   x37
006DE:  MOVLB  0
006E0:  RCALL  00BA
....................             dif_y1_new++; 
006E2:  MOVLW  01
006E4:  ADDWF  3D,F
006E6:  BTFSC  FD8.0
006E8:  INCF   3E,F
006EA:  BTFSC  FD8.2
006EC:  INCF   3F,F
006EE:  BTFSC  FD8.2
006F0:  INCF   40,F
....................          } 
....................          if(dif_y1_new > 0){ 
006F2:  BTFSC  40.7
006F4:  BRA    0722
006F6:  MOVF   40,F
006F8:  BNZ   0708
006FA:  MOVF   3F,F
006FC:  BNZ   0708
006FE:  MOVF   3E,F
00700:  BNZ   0708
00702:  MOVF   3D,W
00704:  SUBLW  00
00706:  BC    0722
....................             moveMotorNema(RIGHT); 
00708:  MOVLW  01
0070A:  MOVLB  1
0070C:  MOVWF  x37
0070E:  MOVLB  0
00710:  RCALL  00BA
....................             dif_y1_new--; 
00712:  MOVLW  FF
00714:  ADDWF  3D,F
00716:  BTFSS  FD8.0
00718:  ADDWF  3E,F
0071A:  BTFSS  FD8.0
0071C:  ADDWF  3F,F
0071E:  BTFSS  FD8.0
00720:  ADDWF  40,F
....................          } 
.................... //!         if(dif_y1_new == 0){ 
.................... //!            bsk++; 
.................... //!            clfl_fl = 1; 
.................... //!         } 
....................       } 
....................        
....................       if(dif_x_new==0 && dif_y1_new==0){ 
00722:  MOVF   2D,F
00724:  BNZ   078E
00726:  MOVF   2E,F
00728:  BNZ   078E
0072A:  MOVF   2F,F
0072C:  BNZ   078E
0072E:  MOVF   30,F
00730:  BNZ   078E
00732:  MOVF   3D,F
00734:  BNZ   078E
00736:  MOVF   3E,F
00738:  BNZ   078E
0073A:  MOVF   3F,F
0073C:  BNZ   078E
0073E:  MOVF   40,F
00740:  BNZ   078E
....................          if(dif_y2_new < 0){ 
00742:  BTFSS  4C.7
00744:  BRA    075E
....................             moveMotorDirsek(LEFT); 
00746:  MOVLB  1
00748:  CLRF   x37
0074A:  MOVLB  0
0074C:  RCALL  0140
....................             dif_y2_new++; 
0074E:  MOVLW  01
00750:  ADDWF  49,F
00752:  BTFSC  FD8.0
00754:  INCF   4A,F
00756:  BTFSC  FD8.2
00758:  INCF   4B,F
0075A:  BTFSC  FD8.2
0075C:  INCF   4C,F
....................          } 
....................          if(dif_y2_new > 0){ 
0075E:  BTFSC  4C.7
00760:  BRA    078E
00762:  MOVF   4C,F
00764:  BNZ   0774
00766:  MOVF   4B,F
00768:  BNZ   0774
0076A:  MOVF   4A,F
0076C:  BNZ   0774
0076E:  MOVF   49,W
00770:  SUBLW  00
00772:  BC    078E
....................             moveMotorDirsek(RIGHT); 
00774:  MOVLW  01
00776:  MOVLB  1
00778:  MOVWF  x37
0077A:  MOVLB  0
0077C:  RCALL  0140
....................             dif_y2_new--; 
0077E:  MOVLW  FF
00780:  ADDWF  49,F
00782:  BTFSS  FD8.0
00784:  ADDWF  4A,F
00786:  BTFSS  FD8.0
00788:  ADDWF  4B,F
0078A:  BTFSS  FD8.0
0078C:  ADDWF  4C,F
....................          } 
.................... //!         if(dif_y2_new == 0){ 
.................... //!            bsk++; 
.................... //!            clfl_fl = 1; 
.................... //!         } 
....................       } 
....................       if(dif_x_new==0 && dif_y1_new==0 && dif_y2_new==0){ 
0078E:  MOVF   2D,F
00790:  BNZ   081E
00792:  MOVF   2E,F
00794:  BNZ   081E
00796:  MOVF   2F,F
00798:  BNZ   081E
0079A:  MOVF   30,F
0079C:  BNZ   081E
0079E:  MOVF   3D,F
007A0:  BNZ   081E
007A2:  MOVF   3E,F
007A4:  BNZ   081E
007A6:  MOVF   3F,F
007A8:  BNZ   081E
007AA:  MOVF   40,F
007AC:  BNZ   081E
007AE:  MOVF   49,F
007B0:  BNZ   081E
007B2:  MOVF   4A,F
007B4:  BNZ   081E
007B6:  MOVF   4B,F
007B8:  BNZ   081E
007BA:  MOVF   4C,F
007BC:  BNZ   081E
....................          if(dif_y3_new < 0){ 
007BE:  BTFSS  58.7
007C0:  BRA    07DA
....................             moveMotorBilek(LEFT); 
007C2:  MOVLB  1
007C4:  CLRF   x37
007C6:  MOVLB  0
007C8:  RCALL  01C2
....................             dif_y3_new++; 
007CA:  MOVLW  01
007CC:  ADDWF  55,F
007CE:  BTFSC  FD8.0
007D0:  INCF   56,F
007D2:  BTFSC  FD8.2
007D4:  INCF   57,F
007D6:  BTFSC  FD8.2
007D8:  INCF   58,F
....................          } 
....................          if(dif_y3_new > 0){ 
007DA:  BTFSC  58.7
007DC:  BRA    080A
007DE:  MOVF   58,F
007E0:  BNZ   07F0
007E2:  MOVF   57,F
007E4:  BNZ   07F0
007E6:  MOVF   56,F
007E8:  BNZ   07F0
007EA:  MOVF   55,W
007EC:  SUBLW  00
007EE:  BC    080A
....................             moveMotorBilek(RIGHT); 
007F0:  MOVLW  01
007F2:  MOVLB  1
007F4:  MOVWF  x37
007F6:  MOVLB  0
007F8:  RCALL  01C2
....................             dif_y3_new--; 
007FA:  MOVLW  FF
007FC:  ADDWF  55,F
007FE:  BTFSS  FD8.0
00800:  ADDWF  56,F
00802:  BTFSS  FD8.0
00804:  ADDWF  57,F
00806:  BTFSS  FD8.0
00808:  ADDWF  58,F
....................          } 
....................          if(dif_y3_new == 0){ 
0080A:  MOVF   55,F
0080C:  BNZ   081E
0080E:  MOVF   56,F
00810:  BNZ   081E
00812:  MOVF   57,F
00814:  BNZ   081E
00816:  MOVF   58,F
00818:  BNZ   081E
....................             clfl_fl = 1; 
0081A:  MOVLW  01
0081C:  MOVWF  0B
....................          } 
....................       } 
....................       if(dif_x_new==0 && dif_y1_new==0 && dif_y2_new==0 && dif_y3_new==0){ 
0081E:  MOVF   2D,F
00820:  BTFSS  FD8.2
00822:  BRA    08C2
00824:  MOVF   2E,F
00826:  BNZ   08C2
00828:  MOVF   2F,F
0082A:  BNZ   08C2
0082C:  MOVF   30,F
0082E:  BNZ   08C2
00830:  MOVF   3D,F
00832:  BNZ   08C2
00834:  MOVF   3E,F
00836:  BNZ   08C2
00838:  MOVF   3F,F
0083A:  BNZ   08C2
0083C:  MOVF   40,F
0083E:  BNZ   08C2
00840:  MOVF   49,F
00842:  BNZ   08C2
00844:  MOVF   4A,F
00846:  BNZ   08C2
00848:  MOVF   4B,F
0084A:  BNZ   08C2
0084C:  MOVF   4C,F
0084E:  BNZ   08C2
00850:  MOVF   55,F
00852:  BNZ   08C2
00854:  MOVF   56,F
00856:  BNZ   08C2
00858:  MOVF   57,F
0085A:  BNZ   08C2
0085C:  MOVF   58,F
0085E:  BNZ   08C2
....................          if(dif_z_new < 0){ 
00860:  BTFSS  x64.7
00862:  BRA    087C
....................             moveMotorEl(LEFT); 
00864:  MOVLB  1
00866:  CLRF   x37
00868:  MOVLB  0
0086A:  RCALL  0244
....................             dif_z_new++; 
0086C:  MOVLW  01
0086E:  ADDWF  x61,F
00870:  BTFSC  FD8.0
00872:  INCF   x62,F
00874:  BTFSC  FD8.2
00876:  INCF   x63,F
00878:  BTFSC  FD8.2
0087A:  INCF   x64,F
....................          } 
....................          if(dif_z_new > 0){ 
0087C:  BTFSC  x64.7
0087E:  BRA    08AC
00880:  MOVF   x64,F
00882:  BNZ   0892
00884:  MOVF   x63,F
00886:  BNZ   0892
00888:  MOVF   x62,F
0088A:  BNZ   0892
0088C:  MOVF   x61,W
0088E:  SUBLW  00
00890:  BC    08AC
....................             moveMotorEl(RIGHT); 
00892:  MOVLW  01
00894:  MOVLB  1
00896:  MOVWF  x37
00898:  MOVLB  0
0089A:  RCALL  0244
....................             dif_z_new--; 
0089C:  MOVLW  FF
0089E:  ADDWF  x61,F
008A0:  BTFSS  FD8.0
008A2:  ADDWF  x62,F
008A4:  BTFSS  FD8.0
008A6:  ADDWF  x63,F
008A8:  BTFSS  FD8.0
008AA:  ADDWF  x64,F
....................          } 
....................          if(dif_z_new == 0){ 
008AC:  MOVF   x61,F
008AE:  BNZ   08C2
008B0:  MOVF   x62,F
008B2:  BNZ   08C2
008B4:  MOVF   x63,F
008B6:  BNZ   08C2
008B8:  MOVF   x64,F
008BA:  BNZ   08C2
....................             bsk++; 
008BC:  INCF   06,F
....................             clfl_fl = 1; 
008BE:  MOVLW  01
008C0:  MOVWF  0B
....................          } 
....................       } 
....................    } 
.................... //!    
....................    if(bsk==1){ 
008C2:  DECFSZ 06,W
008C4:  BRA    0C14
....................       if(clfl==1){ 
008C6:  DECFSZ 08,W
008C8:  BRA    0996
....................          dif_x = hafiza[0][0][0]-hafiza[1][0][0]; 
008CA:  MOVF   x79,W
008CC:  SUBWF  x65,W
008CE:  MOVWF  21
008D0:  MOVF   x7A,W
008D2:  SUBWFB x66,W
008D4:  MOVWF  22
008D6:  MOVF   x7B,W
008D8:  SUBWFB x67,W
008DA:  MOVWF  23
008DC:  MOVF   x7C,W
008DE:  SUBWFB x68,W
008E0:  MOVWF  24
....................          dif_x_new = dif_x; 
008E2:  MOVFF  24,30
008E6:  MOVFF  23,2F
008EA:  MOVFF  22,2E
008EE:  MOVFF  21,2D
....................           
....................          dif_y1 = hafiza[0][0][1]-hafiza[1][0][1]; 
008F2:  MOVF   x7D,W
008F4:  SUBWF  x69,W
008F6:  MOVWF  39
008F8:  MOVF   x7E,W
008FA:  SUBWFB x6A,W
008FC:  MOVWF  3A
008FE:  MOVF   x7F,W
00900:  SUBWFB x6B,W
00902:  MOVWF  3B
00904:  MOVF   x80,W
00906:  SUBWFB x6C,W
00908:  MOVWF  3C
....................          dif_y1_new = dif_y1; 
0090A:  MOVFF  3C,40
0090E:  MOVFF  3B,3F
00912:  MOVFF  3A,3E
00916:  MOVFF  39,3D
....................           
....................          dif_y2 = hafiza[0][0][2]-hafiza[1][0][2]; 
0091A:  MOVF   x81,W
0091C:  SUBWF  x6D,W
0091E:  MOVWF  45
00920:  MOVF   x82,W
00922:  SUBWFB x6E,W
00924:  MOVWF  46
00926:  MOVF   x83,W
00928:  SUBWFB x6F,W
0092A:  MOVWF  47
0092C:  MOVF   x84,W
0092E:  SUBWFB x70,W
00930:  MOVWF  48
....................          dif_y2_new = dif_y2; 
00932:  MOVFF  48,4C
00936:  MOVFF  47,4B
0093A:  MOVFF  46,4A
0093E:  MOVFF  45,49
....................           
....................          dif_y3 = hafiza[0][0][3]-hafiza[1][0][3]; 
00942:  MOVF   x85,W
00944:  SUBWF  x71,W
00946:  MOVWF  51
00948:  MOVF   x86,W
0094A:  SUBWFB x72,W
0094C:  MOVWF  52
0094E:  MOVF   x87,W
00950:  SUBWFB x73,W
00952:  MOVWF  53
00954:  MOVF   x88,W
00956:  SUBWFB x74,W
00958:  MOVWF  54
....................          dif_y3_new = dif_y3; 
0095A:  MOVFF  54,58
0095E:  MOVFF  53,57
00962:  MOVFF  52,56
00966:  MOVFF  51,55
....................           
....................          dif_z = hafiza[0][0][4]-hafiza[1][0][4]; 
0096A:  MOVF   x89,W
0096C:  SUBWF  x75,W
0096E:  MOVWF  5D
00970:  MOVF   x8A,W
00972:  SUBWFB x76,W
00974:  MOVWF  5E
00976:  MOVF   x8B,W
00978:  SUBWFB x77,W
0097A:  MOVWF  5F
0097C:  MOVF   x8C,W
0097E:  SUBWFB x78,W
00980:  MOVWF  x60
....................          dif_z_new = dif_z; 
00982:  MOVFF  60,64
00986:  MOVFF  5F,63
0098A:  MOVFF  5E,62
0098E:  MOVFF  5D,61
....................          clfl=2; 
00992:  MOVLW  02
00994:  MOVWF  08
....................       } 
....................        
....................       if(dif_x_new < 0){ 
00996:  BTFSS  30.7
00998:  BRA    09B4
....................          moveMotorTaban(LEFT); 
0099A:  MOVLB  1
0099C:  CLRF   x37
0099E:  MOVLB  0
009A0:  CALL   0030
....................          dif_x_new++; 
009A4:  MOVLW  01
009A6:  ADDWF  2D,F
009A8:  BTFSC  FD8.0
009AA:  INCF   2E,F
009AC:  BTFSC  FD8.2
009AE:  INCF   2F,F
009B0:  BTFSC  FD8.2
009B2:  INCF   30,F
....................       } 
....................       if(dif_x_new > 0){ 
009B4:  BTFSC  30.7
009B6:  BRA    09E6
009B8:  MOVF   30,F
009BA:  BNZ   09CA
009BC:  MOVF   2F,F
009BE:  BNZ   09CA
009C0:  MOVF   2E,F
009C2:  BNZ   09CA
009C4:  MOVF   2D,W
009C6:  SUBLW  00
009C8:  BC    09E6
....................          moveMotorTaban(RIGHT); 
009CA:  MOVLW  01
009CC:  MOVLB  1
009CE:  MOVWF  x37
009D0:  MOVLB  0
009D2:  CALL   0030
....................          dif_x_new--; 
009D6:  MOVLW  FF
009D8:  ADDWF  2D,F
009DA:  BTFSS  FD8.0
009DC:  ADDWF  2E,F
009DE:  BTFSS  FD8.0
009E0:  ADDWF  2F,F
009E2:  BTFSS  FD8.0
009E4:  ADDWF  30,F
....................       } 
....................       if(dif_x_new == 0){ 
009E6:  MOVF   2D,F
009E8:  BTFSS  FD8.2
009EA:  BRA    0C14
009EC:  MOVF   2E,F
009EE:  BTFSS  FD8.2
009F0:  BRA    0C14
009F2:  MOVF   2F,F
009F4:  BTFSS  FD8.2
009F6:  BRA    0C14
009F8:  MOVF   30,F
009FA:  BTFSS  FD8.2
009FC:  BRA    0C14
....................        
....................          if(dif_y1_new < 0){ 
009FE:  BTFSS  40.7
00A00:  BRA    0A1C
....................             moveMotorNema(LEFT); 
00A02:  MOVLB  1
00A04:  CLRF   x37
00A06:  MOVLB  0
00A08:  CALL   00BA
....................             dif_y1_new++; 
00A0C:  MOVLW  01
00A0E:  ADDWF  3D,F
00A10:  BTFSC  FD8.0
00A12:  INCF   3E,F
00A14:  BTFSC  FD8.2
00A16:  INCF   3F,F
00A18:  BTFSC  FD8.2
00A1A:  INCF   40,F
....................          } 
....................          if(dif_y1_new > 0){ 
00A1C:  BTFSC  40.7
00A1E:  BRA    0A4E
00A20:  MOVF   40,F
00A22:  BNZ   0A32
00A24:  MOVF   3F,F
00A26:  BNZ   0A32
00A28:  MOVF   3E,F
00A2A:  BNZ   0A32
00A2C:  MOVF   3D,W
00A2E:  SUBLW  00
00A30:  BC    0A4E
....................             moveMotorNema(RIGHT); 
00A32:  MOVLW  01
00A34:  MOVLB  1
00A36:  MOVWF  x37
00A38:  MOVLB  0
00A3A:  CALL   00BA
....................             dif_y1_new--; 
00A3E:  MOVLW  FF
00A40:  ADDWF  3D,F
00A42:  BTFSS  FD8.0
00A44:  ADDWF  3E,F
00A46:  BTFSS  FD8.0
00A48:  ADDWF  3F,F
00A4A:  BTFSS  FD8.0
00A4C:  ADDWF  40,F
....................          } 
....................        
....................        
....................       if(dif_x_new == 0 && dif_y1_new == 0){ 
00A4E:  MOVF   2D,F
00A50:  BTFSS  FD8.2
00A52:  BRA    0C14
00A54:  MOVF   2E,F
00A56:  BTFSS  FD8.2
00A58:  BRA    0C14
00A5A:  MOVF   2F,F
00A5C:  BTFSS  FD8.2
00A5E:  BRA    0C14
00A60:  MOVF   30,F
00A62:  BTFSS  FD8.2
00A64:  BRA    0C14
00A66:  MOVF   3D,F
00A68:  BTFSS  FD8.2
00A6A:  BRA    0C14
00A6C:  MOVF   3E,F
00A6E:  BTFSS  FD8.2
00A70:  BRA    0C14
00A72:  MOVF   3F,F
00A74:  BTFSS  FD8.2
00A76:  BRA    0C14
00A78:  MOVF   40,F
00A7A:  BTFSS  FD8.2
00A7C:  BRA    0C14
....................        
....................          if(dif_y2_new < 0){ 
00A7E:  BTFSS  4C.7
00A80:  BRA    0A9C
....................             moveMotorDirsek(LEFT); 
00A82:  MOVLB  1
00A84:  CLRF   x37
00A86:  MOVLB  0
00A88:  CALL   0140
....................             dif_y2_new++; 
00A8C:  MOVLW  01
00A8E:  ADDWF  49,F
00A90:  BTFSC  FD8.0
00A92:  INCF   4A,F
00A94:  BTFSC  FD8.2
00A96:  INCF   4B,F
00A98:  BTFSC  FD8.2
00A9A:  INCF   4C,F
....................          } 
....................          if(dif_y2_new > 0){ 
00A9C:  BTFSC  4C.7
00A9E:  BRA    0ACE
00AA0:  MOVF   4C,F
00AA2:  BNZ   0AB2
00AA4:  MOVF   4B,F
00AA6:  BNZ   0AB2
00AA8:  MOVF   4A,F
00AAA:  BNZ   0AB2
00AAC:  MOVF   49,W
00AAE:  SUBLW  00
00AB0:  BC    0ACE
....................             moveMotorDirsek(RIGHT); 
00AB2:  MOVLW  01
00AB4:  MOVLB  1
00AB6:  MOVWF  x37
00AB8:  MOVLB  0
00ABA:  CALL   0140
....................             dif_y2_new--; 
00ABE:  MOVLW  FF
00AC0:  ADDWF  49,F
00AC2:  BTFSS  FD8.0
00AC4:  ADDWF  4A,F
00AC6:  BTFSS  FD8.0
00AC8:  ADDWF  4B,F
00ACA:  BTFSS  FD8.0
00ACC:  ADDWF  4C,F
....................          } 
....................        
....................       if(dif_x_new == 0 && dif_y1_new == 0 && dif_y2_new == 0){ 
00ACE:  MOVF   2D,F
00AD0:  BTFSS  FD8.2
00AD2:  BRA    0C14
00AD4:  MOVF   2E,F
00AD6:  BTFSS  FD8.2
00AD8:  BRA    0C14
00ADA:  MOVF   2F,F
00ADC:  BTFSS  FD8.2
00ADE:  BRA    0C14
00AE0:  MOVF   30,F
00AE2:  BTFSS  FD8.2
00AE4:  BRA    0C14
00AE6:  MOVF   3D,F
00AE8:  BTFSS  FD8.2
00AEA:  BRA    0C14
00AEC:  MOVF   3E,F
00AEE:  BTFSS  FD8.2
00AF0:  BRA    0C14
00AF2:  MOVF   3F,F
00AF4:  BTFSS  FD8.2
00AF6:  BRA    0C14
00AF8:  MOVF   40,F
00AFA:  BTFSS  FD8.2
00AFC:  BRA    0C14
00AFE:  MOVF   49,F
00B00:  BTFSS  FD8.2
00B02:  BRA    0C14
00B04:  MOVF   4A,F
00B06:  BTFSS  FD8.2
00B08:  BRA    0C14
00B0A:  MOVF   4B,F
00B0C:  BTFSS  FD8.2
00B0E:  BRA    0C14
00B10:  MOVF   4C,F
00B12:  BTFSS  FD8.2
00B14:  BRA    0C14
....................        
....................          if(dif_y3_new < 0){ 
00B16:  BTFSS  58.7
00B18:  BRA    0B34
....................             moveMotorBilek(LEFT); 
00B1A:  MOVLB  1
00B1C:  CLRF   x37
00B1E:  MOVLB  0
00B20:  CALL   01C2
....................             dif_y3_new++; 
00B24:  MOVLW  01
00B26:  ADDWF  55,F
00B28:  BTFSC  FD8.0
00B2A:  INCF   56,F
00B2C:  BTFSC  FD8.2
00B2E:  INCF   57,F
00B30:  BTFSC  FD8.2
00B32:  INCF   58,F
....................          } 
....................          if(dif_y3_new > 0){ 
00B34:  BTFSC  58.7
00B36:  BRA    0B66
00B38:  MOVF   58,F
00B3A:  BNZ   0B4A
00B3C:  MOVF   57,F
00B3E:  BNZ   0B4A
00B40:  MOVF   56,F
00B42:  BNZ   0B4A
00B44:  MOVF   55,W
00B46:  SUBLW  00
00B48:  BC    0B66
....................             moveMotorBilek(RIGHT); 
00B4A:  MOVLW  01
00B4C:  MOVLB  1
00B4E:  MOVWF  x37
00B50:  MOVLB  0
00B52:  CALL   01C2
....................             dif_y3_new--; 
00B56:  MOVLW  FF
00B58:  ADDWF  55,F
00B5A:  BTFSS  FD8.0
00B5C:  ADDWF  56,F
00B5E:  BTFSS  FD8.0
00B60:  ADDWF  57,F
00B62:  BTFSS  FD8.0
00B64:  ADDWF  58,F
....................          } 
.................... //!         if(dif_y3_new == 0){ 
.................... //!            bsk=0; 
.................... //!            clfl_fl = 0; 
.................... //!            clfl = 0; 
.................... //!            ply_fl=0; 
.................... //!            reset_fl=0; 
.................... //!         } 
....................       if(dif_x_new == 0 && dif_y1_new == 0 && dif_y2_new == 0 && dif_y3_new == 0){ 
00B66:  MOVF   2D,F
00B68:  BTFSS  FD8.2
00B6A:  BRA    0C14
00B6C:  MOVF   2E,F
00B6E:  BTFSS  FD8.2
00B70:  BRA    0C14
00B72:  MOVF   2F,F
00B74:  BNZ   0C14
00B76:  MOVF   30,F
00B78:  BNZ   0C14
00B7A:  MOVF   3D,F
00B7C:  BNZ   0C14
00B7E:  MOVF   3E,F
00B80:  BNZ   0C14
00B82:  MOVF   3F,F
00B84:  BNZ   0C14
00B86:  MOVF   40,F
00B88:  BNZ   0C14
00B8A:  MOVF   49,F
00B8C:  BNZ   0C14
00B8E:  MOVF   4A,F
00B90:  BNZ   0C14
00B92:  MOVF   4B,F
00B94:  BNZ   0C14
00B96:  MOVF   4C,F
00B98:  BNZ   0C14
00B9A:  MOVF   55,F
00B9C:  BNZ   0C14
00B9E:  MOVF   56,F
00BA0:  BNZ   0C14
00BA2:  MOVF   57,F
00BA4:  BNZ   0C14
00BA6:  MOVF   58,F
00BA8:  BNZ   0C14
....................        
....................          if(dif_z_new < 0){ 
00BAA:  BTFSS  x64.7
00BAC:  BRA    0BC8
....................             moveMotorEl(LEFT); 
00BAE:  MOVLB  1
00BB0:  CLRF   x37
00BB2:  MOVLB  0
00BB4:  CALL   0244
....................             dif_z_new++; 
00BB8:  MOVLW  01
00BBA:  ADDWF  x61,F
00BBC:  BTFSC  FD8.0
00BBE:  INCF   x62,F
00BC0:  BTFSC  FD8.2
00BC2:  INCF   x63,F
00BC4:  BTFSC  FD8.2
00BC6:  INCF   x64,F
....................          } 
....................          if(dif_z_new > 0){ 
00BC8:  BTFSC  x64.7
00BCA:  BRA    0BFA
00BCC:  MOVF   x64,F
00BCE:  BNZ   0BDE
00BD0:  MOVF   x63,F
00BD2:  BNZ   0BDE
00BD4:  MOVF   x62,F
00BD6:  BNZ   0BDE
00BD8:  MOVF   x61,W
00BDA:  SUBLW  00
00BDC:  BC    0BFA
....................             moveMotorEl(RIGHT); 
00BDE:  MOVLW  01
00BE0:  MOVLB  1
00BE2:  MOVWF  x37
00BE4:  MOVLB  0
00BE6:  CALL   0244
....................             dif_z_new--; 
00BEA:  MOVLW  FF
00BEC:  ADDWF  x61,F
00BEE:  BTFSS  FD8.0
00BF0:  ADDWF  x62,F
00BF2:  BTFSS  FD8.0
00BF4:  ADDWF  x63,F
00BF6:  BTFSS  FD8.0
00BF8:  ADDWF  x64,F
....................          } 
....................          if(dif_z_new == 0){ 
00BFA:  MOVF   x61,F
00BFC:  BNZ   0C14
00BFE:  MOVF   x62,F
00C00:  BNZ   0C14
00C02:  MOVF   x63,F
00C04:  BNZ   0C14
00C06:  MOVF   x64,F
00C08:  BNZ   0C14
....................             bsk=0; 
00C0A:  CLRF   06
....................             clfl_fl = 0; 
00C0C:  CLRF   0B
....................             clfl = 0; 
00C0E:  CLRF   08
....................             ply_fl=0; 
00C10:  CLRF   07
....................             reset_fl=0; 
00C12:  CLRF   0C
....................          } 
....................       } 
....................       } 
....................       } 
....................       } 
....................        
....................    } 
00C14:  GOTO   127C (RETURN)
.................... } 
....................  
....................  
.................... void main() 
00C18:  CLRF   FF8
00C1A:  BCF    FD0.7
00C1C:  MOVLW  70
00C1E:  MOVWF  FD3
00C20:  BSF    F9B.6
00C22:  BCF    F9B.7
00C24:  CLRF   04
00C26:  CLRF   05
00C28:  CLRF   06
00C2A:  CLRF   07
00C2C:  CLRF   08
00C2E:  CLRF   09
00C30:  CLRF   0A
00C32:  CLRF   0B
00C34:  CLRF   0C
00C36:  CLRF   10
00C38:  CLRF   0F
00C3A:  CLRF   0E
00C3C:  CLRF   0D
00C3E:  CLRF   14
00C40:  CLRF   13
00C42:  CLRF   12
00C44:  CLRF   11
00C46:  CLRF   18
00C48:  CLRF   17
00C4A:  CLRF   16
00C4C:  CLRF   15
00C4E:  CLRF   1C
00C50:  CLRF   1B
00C52:  CLRF   1A
00C54:  CLRF   19
00C56:  CLRF   20
00C58:  CLRF   1F
00C5A:  CLRF   1E
00C5C:  CLRF   1D
00C5E:  CLRF   24
00C60:  CLRF   23
00C62:  CLRF   22
00C64:  CLRF   21
00C66:  CLRF   28
00C68:  CLRF   27
00C6A:  CLRF   26
00C6C:  CLRF   25
00C6E:  CLRF   2C
00C70:  CLRF   2B
00C72:  CLRF   2A
00C74:  CLRF   29
00C76:  CLRF   30
00C78:  CLRF   2F
00C7A:  CLRF   2E
00C7C:  CLRF   2D
00C7E:  CLRF   34
00C80:  CLRF   33
00C82:  CLRF   32
00C84:  CLRF   31
00C86:  CLRF   38
00C88:  CLRF   37
00C8A:  CLRF   36
00C8C:  CLRF   35
00C8E:  CLRF   3C
00C90:  CLRF   3B
00C92:  CLRF   3A
00C94:  CLRF   39
00C96:  CLRF   40
00C98:  CLRF   3F
00C9A:  CLRF   3E
00C9C:  CLRF   3D
00C9E:  CLRF   44
00CA0:  CLRF   43
00CA2:  CLRF   42
00CA4:  CLRF   41
00CA6:  CLRF   48
00CA8:  CLRF   47
00CAA:  CLRF   46
00CAC:  CLRF   45
00CAE:  CLRF   4C
00CB0:  CLRF   4B
00CB2:  CLRF   4A
00CB4:  CLRF   49
00CB6:  CLRF   50
00CB8:  CLRF   4F
00CBA:  CLRF   4E
00CBC:  CLRF   4D
00CBE:  CLRF   54
00CC0:  CLRF   53
00CC2:  CLRF   52
00CC4:  CLRF   51
00CC6:  CLRF   58
00CC8:  CLRF   57
00CCA:  CLRF   56
00CCC:  CLRF   55
00CCE:  CLRF   5C
00CD0:  CLRF   5B
00CD2:  CLRF   5A
00CD4:  CLRF   59
00CD6:  CLRF   x60
00CD8:  CLRF   5F
00CDA:  CLRF   5E
00CDC:  CLRF   5D
00CDE:  CLRF   x64
00CE0:  CLRF   x63
00CE2:  CLRF   x62
00CE4:  CLRF   x61
00CE6:  MOVLB  F
00CE8:  CLRF   x38
00CEA:  CLRF   x39
00CEC:  CLRF   x3A
00CEE:  CLRF   x3B
00CF0:  CLRF   x3C
00CF2:  CLRF   F77
00CF4:  CLRF   F78
00CF6:  CLRF   F79
00CF8:  BRA    0D00
00CFA:  DATA C8,40
00CFC:  DATA 65,00
00CFE:  DATA 00,00
00D00:  MOVLW  00
00D02:  MOVWF  FF8
00D04:  MOVLW  0C
00D06:  MOVWF  FF7
00D08:  MOVLW  FA
00D0A:  MOVWF  FF6
00D0C:  TBLRD*+
00D0E:  MOVF   FF5,W
00D10:  MOVWF  00
00D12:  XORLW  00
00D14:  BZ    0D3C
00D16:  TBLRD*+
00D18:  MOVF   FF5,W
00D1A:  MOVWF  01
00D1C:  BTFSC  FE8.7
00D1E:  BRA    0D2A
00D20:  ANDLW  0F
00D22:  MOVWF  FEA
00D24:  TBLRD*+
00D26:  MOVFF  FF5,FE9
00D2A:  BTFSC  01.6
00D2C:  TBLRD*+
00D2E:  BTFSS  01.6
00D30:  TBLRD*+
00D32:  MOVFF  FF5,FEE
00D36:  DCFSNZ 00,F
00D38:  BRA    0D0C
00D3A:  BRA    0D2E
00D3C:  CLRF   FF8
.................... { 
....................       set_tris_a(0x00); 
00D3E:  MOVLW  00
00D40:  MOVWF  F92
....................       set_tris_b(0x00); 
00D42:  MOVWF  F93
....................       set_tris_c(0b11111100); 
00D44:  MOVLW  FC
00D46:  MOVWF  F94
....................       set_tris_d(0b01111111); 
00D48:  MOVLW  7F
00D4A:  MOVWF  F95
....................       // Motor sürücü pinlerini çýkýþ olarak ayarla 
....................       output_low(ENABLE_TABAN); 
00D4C:  BCF    F96.1
00D4E:  BCF    F8D.1
....................       output_low(DIR_TABAN); 
00D50:  BCF    F89.5
....................       output_low(STEP_TABAN); 
00D52:  BCF    F96.0
00D54:  BCF    F8D.0
....................        
....................       // Motor sürücü pinlerini çýkýþ olarak ayarla 
....................       output_low(ENABLE_NEMA); 
00D56:  BCF    F89.6
....................       output_low(DIR_NEMA); 
00D58:  BCF    F96.2
00D5A:  BCF    F8D.2
....................       output_low(STEP_NEMA); 
00D5C:  BCF    F89.7
....................        
....................       // Motor sürücü pinlerini çýkýþ olarak ayarla 
....................       output_low(ENABLE_DIRSEK); 
00D5E:  BCF    F89.3
....................       output_low(DIR_DIRSEK); 
00D60:  BCF    F89.0
....................       output_low(STEP_DIRSEK); 
00D62:  BCF    F89.2
....................        
....................       // Motor sürücü pinlerini çýkýþ olarak ayarla 
....................       output_low(ENABLE_BILEK); 
00D64:  BCF    F8A.5
....................       output_low(DIR_BILEK); 
00D66:  BCF    F8A.2
....................       output_low(STEP_BILEK); 
00D68:  BCF    F8A.4
....................        
....................       // Motor sürücü pinlerini çýkýþ olarak ayarla 
....................       output_low(ENABLE_EL); 
00D6A:  BCF    F8A.1
....................       output_low(DIR_EL); 
00D6C:  BCF    F8C.7
....................       output_low(STEP_EL); 
00D6E:  BCF    F8A.0
....................  
....................   
.................... while(TRUE) // sonsuz döngü 
.................... { 
....................       output_high(STEP_NEMA); 
00D70:  BSF    F89.7
....................        
....................       //ADC Portlarýn ayarlanmasý. 
....................       setup_adc_ports(sAN20|sAN15|sAN23|sAN22|sAN14); 
00D72:  MOVF   FC1,W
00D74:  ANDLW  F0
00D76:  MOVWF  FC1
00D78:  MOVLW  00
00D7A:  MOVWF  x38
00D7C:  MOVWF  x3C
00D7E:  MOVWF  x39
00D80:  MOVLW  0C
00D82:  MOVWF  x3A
00D84:  MOVLW  0D
00D86:  MOVWF  x3B
....................       setup_adc(ADC_CLOCK_INTERNAL); 
00D88:  MOVF   FC0,W
00D8A:  ANDLW  C0
00D8C:  IORLW  07
00D8E:  MOVWF  FC0
00D90:  BSF    FC0.7
00D92:  BSF    FC2.0
....................        
....................        
....................       set_adc_channel(20); 
00D94:  MOVLW  50
00D96:  MOVWF  01
00D98:  MOVF   FC2,W
00D9A:  ANDLW  83
00D9C:  IORWF  01,W
00D9E:  MOVWF  FC2
....................       delay_us(10); // Kanal geçiþi için bir bekleme süresi 
00DA0:  MOVLW  35
00DA2:  MOVWF  00
00DA4:  DECFSZ 00,F
00DA6:  BRA    0DA4
....................       int16_t joystick_taban = read_adc(); 
00DA8:  BSF    FC2.1
00DAA:  BTFSC  FC2.1
00DAC:  BRA    0DAA
00DAE:  MOVFF  FC4,12E
00DB2:  MOVLB  1
00DB4:  MOVFF  FC3,12D
....................       delay_us(10); 
00DB8:  MOVLW  35
00DBA:  MOVWF  00
00DBC:  DECFSZ 00,F
00DBE:  BRA    0DBC
....................        
....................       set_adc_channel(15); // AN15 pinine geç 
00DC0:  MOVLW  3C
00DC2:  MOVWF  01
00DC4:  MOVF   FC2,W
00DC6:  ANDLW  83
00DC8:  IORWF  01,W
00DCA:  MOVWF  FC2
....................       delay_us(10); // Kanal geçiþi için bir bekleme süresi 
00DCC:  MOVLW  35
00DCE:  MOVWF  00
00DD0:  DECFSZ 00,F
00DD2:  BRA    0DD0
....................       int16_t joystick_nema = read_adc(); // AN1 pininin analog deðerini oku 
00DD4:  BSF    FC2.1
00DD6:  BTFSC  FC2.1
00DD8:  BRA    0DD6
00DDA:  MOVFF  FC3,12F
00DDE:  MOVFF  FC4,130
....................       delay_us(10); 
00DE2:  MOVLW  35
00DE4:  MOVWF  00
00DE6:  DECFSZ 00,F
00DE8:  BRA    0DE6
....................        
....................       set_adc_channel(23); // AN15 pinine geç 
00DEA:  MOVLW  5C
00DEC:  MOVWF  01
00DEE:  MOVF   FC2,W
00DF0:  ANDLW  83
00DF2:  IORWF  01,W
00DF4:  MOVWF  FC2
....................       delay_us(10); // Kanal geçiþi için bir bekleme süresi 
00DF6:  MOVLW  35
00DF8:  MOVWF  00
00DFA:  DECFSZ 00,F
00DFC:  BRA    0DFA
....................       int16_t joystick_dirsek = read_adc(); // AN1 pininin analog deðerini oku 
00DFE:  BSF    FC2.1
00E00:  BTFSC  FC2.1
00E02:  BRA    0E00
00E04:  MOVFF  FC3,131
00E08:  MOVFF  FC4,132
....................       delay_us(10); 
00E0C:  MOVLW  35
00E0E:  MOVWF  00
00E10:  DECFSZ 00,F
00E12:  BRA    0E10
....................        
....................       set_adc_channel(22); // AN15 pinine geç 
00E14:  MOVLW  58
00E16:  MOVWF  01
00E18:  MOVF   FC2,W
00E1A:  ANDLW  83
00E1C:  IORWF  01,W
00E1E:  MOVWF  FC2
....................       delay_us(10); // Kanal geçiþi için bir bekleme süresi 
00E20:  MOVLW  35
00E22:  MOVWF  00
00E24:  DECFSZ 00,F
00E26:  BRA    0E24
....................       int16_t joystick_bilek = read_adc(); // AN1 pininin analog deðerini oku 
00E28:  BSF    FC2.1
00E2A:  BTFSC  FC2.1
00E2C:  BRA    0E2A
00E2E:  MOVFF  FC3,133
00E32:  MOVFF  FC4,134
....................       delay_us(10); 
00E36:  MOVLW  35
00E38:  MOVWF  00
00E3A:  DECFSZ 00,F
00E3C:  BRA    0E3A
....................        
....................       set_adc_channel(14); // AN15 pinine geç 
00E3E:  MOVLW  38
00E40:  MOVWF  01
00E42:  MOVF   FC2,W
00E44:  ANDLW  83
00E46:  IORWF  01,W
00E48:  MOVWF  FC2
....................       delay_us(10); // Kanal geçiþi için bir bekleme süresi 
00E4A:  MOVLW  35
00E4C:  MOVWF  00
00E4E:  DECFSZ 00,F
00E50:  BRA    0E4E
....................       int16_t joystick_el = read_adc(); // AN1 pininin analog deðerini oku 
00E52:  BSF    FC2.1
00E54:  BTFSC  FC2.1
00E56:  BRA    0E54
00E58:  MOVFF  FC3,135
00E5C:  MOVFF  FC4,136
....................        
....................       // TABAN HAREKET 
....................       if(joystick_taban > 700) 
00E60:  BTFSC  x2E.7
00E62:  BRA    0E80
00E64:  MOVF   x2E,W
00E66:  SUBLW  01
00E68:  BC    0E80
00E6A:  XORLW  FF
00E6C:  BNZ   0E74
00E6E:  MOVF   x2D,W
00E70:  SUBLW  BC
00E72:  BC    0E80
....................       { 
....................          moveMotorTaban(LEFT); 
00E74:  CLRF   x37
00E76:  MOVLB  0
00E78:  CALL   0030
....................           
....................       } 
00E7C:  BRA    0E98
00E7E:  MOVLB  1
....................       // TABAN HAREKET 
....................       else if(joystick_taban < 250) 
00E80:  BTFSC  x2E.7
00E82:  BRA    0E8E
00E84:  MOVF   x2E,F
00E86:  BNZ   0E9A
00E88:  MOVF   x2D,W
00E8A:  SUBLW  F9
00E8C:  BNC   0E9A
....................       { 
....................           moveMotorTaban(RIGHT); 
00E8E:  MOVLW  01
00E90:  MOVWF  x37
00E92:  MOVLB  0
00E94:  CALL   0030
00E98:  MOVLB  1
....................           
....................       } 
....................        
....................       // NEMA HAREKET 
....................       if(joystick_nema > 700) 
00E9A:  BTFSC  x30.7
00E9C:  BRA    0EBA
00E9E:  MOVF   x30,W
00EA0:  SUBLW  01
00EA2:  BC    0EBA
00EA4:  XORLW  FF
00EA6:  BNZ   0EAE
00EA8:  MOVF   x2F,W
00EAA:  SUBLW  BC
00EAC:  BC    0EBA
....................       { 
....................          moveMotorNema(LEFT); 
00EAE:  CLRF   x37
00EB0:  MOVLB  0
00EB2:  CALL   00BA
....................           
....................       } 
00EB6:  BRA    0ED2
00EB8:  MOVLB  1
....................       // NEMA HAREKET 
....................       else if(joystick_nema < 250) 
00EBA:  BTFSC  x30.7
00EBC:  BRA    0EC8
00EBE:  MOVF   x30,F
00EC0:  BNZ   0ED4
00EC2:  MOVF   x2F,W
00EC4:  SUBLW  F9
00EC6:  BNC   0ED4
....................       { 
....................           moveMotorNema(RIGHT); 
00EC8:  MOVLW  01
00ECA:  MOVWF  x37
00ECC:  MOVLB  0
00ECE:  CALL   00BA
00ED2:  MOVLB  1
....................           
....................       } 
....................        
....................       // DÝRSEK 
....................       if(joystick_dirsek > 700) 
00ED4:  BTFSC  x32.7
00ED6:  BRA    0EF4
00ED8:  MOVF   x32,W
00EDA:  SUBLW  01
00EDC:  BC    0EF4
00EDE:  XORLW  FF
00EE0:  BNZ   0EE8
00EE2:  MOVF   x31,W
00EE4:  SUBLW  BC
00EE6:  BC    0EF4
....................       { 
....................          moveMotorDirsek(LEFT); 
00EE8:  CLRF   x37
00EEA:  MOVLB  0
00EEC:  CALL   0140
....................           
....................       } 
00EF0:  BRA    0F0C
00EF2:  MOVLB  1
....................       // DÝRSEK 
....................       else if(joystick_dirsek < 250) 
00EF4:  BTFSC  x32.7
00EF6:  BRA    0F02
00EF8:  MOVF   x32,F
00EFA:  BNZ   0F0E
00EFC:  MOVF   x31,W
00EFE:  SUBLW  F9
00F00:  BNC   0F0E
....................       { 
....................           moveMotorDirsek(RIGHT); 
00F02:  MOVLW  01
00F04:  MOVWF  x37
00F06:  MOVLB  0
00F08:  CALL   0140
00F0C:  MOVLB  1
....................           
....................       } 
....................       // BÝLEK 
....................       if(joystick_bilek > 700) 
00F0E:  BTFSC  x34.7
00F10:  BRA    0F2E
00F12:  MOVF   x34,W
00F14:  SUBLW  01
00F16:  BC    0F2E
00F18:  XORLW  FF
00F1A:  BNZ   0F22
00F1C:  MOVF   x33,W
00F1E:  SUBLW  BC
00F20:  BC    0F2E
....................       { 
....................          moveMotorBilek(LEFT); 
00F22:  CLRF   x37
00F24:  MOVLB  0
00F26:  CALL   01C2
....................           
....................       } 
00F2A:  BRA    0F46
00F2C:  MOVLB  1
....................       // BÝLEK 
....................       else if(joystick_bilek < 250) 
00F2E:  BTFSC  x34.7
00F30:  BRA    0F3C
00F32:  MOVF   x34,F
00F34:  BNZ   0F48
00F36:  MOVF   x33,W
00F38:  SUBLW  F9
00F3A:  BNC   0F48
....................       { 
....................           moveMotorBilek(RIGHT); 
00F3C:  MOVLW  01
00F3E:  MOVWF  x37
00F40:  MOVLB  0
00F42:  CALL   01C2
00F46:  MOVLB  1
....................           
....................       } 
....................        
....................       // EL 
....................       if(joystick_el > 700) 
00F48:  BTFSC  x36.7
00F4A:  BRA    0F68
00F4C:  MOVF   x36,W
00F4E:  SUBLW  01
00F50:  BC    0F68
00F52:  XORLW  FF
00F54:  BNZ   0F5C
00F56:  MOVF   x35,W
00F58:  SUBLW  BC
00F5A:  BC    0F68
....................       { 
....................          moveMotorEl(LEFT); 
00F5C:  CLRF   x37
00F5E:  MOVLB  0
00F60:  CALL   0244
....................           
....................       } 
00F64:  BRA    0F80
00F66:  MOVLB  1
....................       // EL 
....................       else if(joystick_el < 250) 
00F68:  BTFSC  x36.7
00F6A:  BRA    0F76
00F6C:  MOVF   x36,F
00F6E:  BNZ   0F82
00F70:  MOVF   x35,W
00F72:  SUBLW  F9
00F74:  BNC   0F82
....................       { 
....................           moveMotorEl(RIGHT); 
00F76:  MOVLW  01
00F78:  MOVWF  x37
00F7A:  MOVLB  0
00F7C:  CALL   0244
00F80:  MOVLB  1
....................           
....................       } 
....................        
....................        
....................       // C7 pinine baðlý düðme kontrolü 
....................       if(input(PIN_C7) && rec_fl==0) 
00F82:  BTFSS  F82.7
00F84:  BRA    0FA2
00F86:  MOVF   04,F
00F88:  BNZ   0FA2
....................       { 
....................          rec_fl=1; 
00F8A:  MOVLW  01
00F8C:  MOVWF  04
....................          delay_ms(500); 
00F8E:  MOVLW  02
00F90:  MOVWF  x37
00F92:  MOVLW  FA
00F94:  MOVWF  x38
00F96:  MOVLB  0
00F98:  CALL   02C6
00F9C:  MOVLB  1
00F9E:  DECFSZ x37,F
00FA0:  BRA    0F92
....................           
....................       } 
....................       if(input(PIN_C7)){ 
00FA2:  BTFSS  F82.7
00FA4:  BRA    0FB6
....................          c7_fl = 1; 
00FA6:  MOVLW  01
00FA8:  MOVWF  0A
....................          delay_ms(200); 
00FAA:  MOVLW  C8
00FAC:  MOVWF  x38
00FAE:  MOVLB  0
00FB0:  CALL   02C6
00FB4:  MOVLB  1
....................       } 
....................        
....................       if(c7_fl==1 && rec_fl==1) 
00FB6:  DECFSZ 0A,W
00FB8:  BRA    101C
00FBA:  DECFSZ 04,W
00FBC:  BRA    101C
....................       { 
....................          resetMoves(); 
00FBE:  MOVLB  0
00FC0:  CALL   02F0
....................          if(x==0 && y1==0 && y2==0 && y3==0 && z==0){ 
00FC4:  MOVF   0D,F
00FC6:  BNZ   101A
00FC8:  MOVF   0E,F
00FCA:  BNZ   101A
00FCC:  MOVF   0F,F
00FCE:  BNZ   101A
00FD0:  MOVF   10,F
00FD2:  BNZ   101A
00FD4:  MOVF   11,F
00FD6:  BNZ   101A
00FD8:  MOVF   12,F
00FDA:  BNZ   101A
00FDC:  MOVF   13,F
00FDE:  BNZ   101A
00FE0:  MOVF   14,F
00FE2:  BNZ   101A
00FE4:  MOVF   15,F
00FE6:  BNZ   101A
00FE8:  MOVF   16,F
00FEA:  BNZ   101A
00FEC:  MOVF   17,F
00FEE:  BNZ   101A
00FF0:  MOVF   18,F
00FF2:  BNZ   101A
00FF4:  MOVF   19,F
00FF6:  BNZ   101A
00FF8:  MOVF   1A,F
00FFA:  BNZ   101A
00FFC:  MOVF   1B,F
00FFE:  BNZ   101A
01000:  MOVF   1C,F
01002:  BNZ   101A
01004:  MOVF   1D,F
01006:  BNZ   101A
01008:  MOVF   1E,F
0100A:  BNZ   101A
0100C:  MOVF   1F,F
0100E:  BNZ   101A
01010:  MOVF   20,F
01012:  BNZ   101A
....................             c7_fl=0; 
01014:  CLRF   0A
....................             rec_fl=0; 
01016:  CLRF   04
....................             i=0; 
01018:  CLRF   05
0101A:  MOVLB  1
....................          } 
....................           
....................       } 
....................       if(rec_fl==1){ 
0101C:  DECFSZ 04,W
0101E:  BRA    122E
....................          if(input(PIN_D4) && i==0){ 
01020:  BTFSS  F83.4
01022:  BRA    1128
01024:  MOVF   05,F
01026:  BTFSS  FD8.2
01028:  BRA    1128
....................             hafiza[i][0][0]=x; 
0102A:  MOVF   05,W
0102C:  MULLW  14
0102E:  MOVF   FF3,W
01030:  CLRF   x38
01032:  MOVWF  x37
01034:  MOVLW  65
01036:  ADDWF  x37,W
01038:  MOVWF  FE9
0103A:  MOVLW  00
0103C:  ADDWFC x38,W
0103E:  MOVWF  FEA
01040:  MOVFF  0D,FEF
01044:  MOVFF  0E,FEC
01048:  MOVFF  0F,FEC
0104C:  MOVFF  10,FEC
....................             hafiza[i][0][1]=y1; 
01050:  MOVF   05,W
01052:  MULLW  14
01054:  MOVF   FF3,W
01056:  CLRF   x38
01058:  MOVWF  x37
0105A:  MOVLW  04
0105C:  ADDWF  x37,W
0105E:  MOVWF  01
01060:  MOVLW  00
01062:  ADDWFC x38,W
01064:  MOVWF  03
01066:  MOVF   01,W
01068:  ADDLW  65
0106A:  MOVWF  FE9
0106C:  MOVLW  00
0106E:  ADDWFC 03,W
01070:  MOVWF  FEA
01072:  MOVFF  11,FEF
01076:  MOVFF  12,FEC
0107A:  MOVFF  13,FEC
0107E:  MOVFF  14,FEC
....................             hafiza[i][0][2]=y2; 
01082:  MOVF   05,W
01084:  MULLW  14
01086:  MOVF   FF3,W
01088:  CLRF   x38
0108A:  MOVWF  x37
0108C:  MOVLW  08
0108E:  ADDWF  x37,W
01090:  MOVWF  01
01092:  MOVLW  00
01094:  ADDWFC x38,W
01096:  MOVWF  03
01098:  MOVF   01,W
0109A:  ADDLW  65
0109C:  MOVWF  FE9
0109E:  MOVLW  00
010A0:  ADDWFC 03,W
010A2:  MOVWF  FEA
010A4:  MOVFF  15,FEF
010A8:  MOVFF  16,FEC
010AC:  MOVFF  17,FEC
010B0:  MOVFF  18,FEC
....................             hafiza[i][0][3]=y3; 
010B4:  MOVF   05,W
010B6:  MULLW  14
010B8:  MOVF   FF3,W
010BA:  CLRF   x38
010BC:  MOVWF  x37
010BE:  MOVLW  0C
010C0:  ADDWF  x37,W
010C2:  MOVWF  01
010C4:  MOVLW  00
010C6:  ADDWFC x38,W
010C8:  MOVWF  03
010CA:  MOVF   01,W
010CC:  ADDLW  65
010CE:  MOVWF  FE9
010D0:  MOVLW  00
010D2:  ADDWFC 03,W
010D4:  MOVWF  FEA
010D6:  MOVFF  19,FEF
010DA:  MOVFF  1A,FEC
010DE:  MOVFF  1B,FEC
010E2:  MOVFF  1C,FEC
....................             hafiza[i][0][4]=z; 
010E6:  MOVF   05,W
010E8:  MULLW  14
010EA:  MOVF   FF3,W
010EC:  CLRF   x38
010EE:  MOVWF  x37
010F0:  MOVLW  10
010F2:  ADDWF  x37,W
010F4:  MOVWF  01
010F6:  MOVLW  00
010F8:  ADDWFC x38,W
010FA:  MOVWF  03
010FC:  MOVF   01,W
010FE:  ADDLW  65
01100:  MOVWF  FE9
01102:  MOVLW  00
01104:  ADDWFC 03,W
01106:  MOVWF  FEA
01108:  MOVFF  1D,FEF
0110C:  MOVFF  1E,FEC
01110:  MOVFF  1F,FEC
01114:  MOVFF  20,FEC
....................             i=1; 
01118:  MOVLW  01
0111A:  MOVWF  05
....................             delay_ms(200); 
0111C:  MOVLW  C8
0111E:  MOVWF  x38
01120:  MOVLB  0
01122:  CALL   02C6
01126:  MOVLB  1
....................          } 
....................           
....................          if(input(PIN_D4) && i==1){ 
01128:  BTFSS  F83.4
0112A:  BRA    122E
0112C:  DECFSZ 05,W
0112E:  BRA    122E
....................             hafiza[i][0][0]=x; 
01130:  MOVF   05,W
01132:  MULLW  14
01134:  MOVF   FF3,W
01136:  CLRF   x38
01138:  MOVWF  x37
0113A:  MOVLW  65
0113C:  ADDWF  x37,W
0113E:  MOVWF  FE9
01140:  MOVLW  00
01142:  ADDWFC x38,W
01144:  MOVWF  FEA
01146:  MOVFF  0D,FEF
0114A:  MOVFF  0E,FEC
0114E:  MOVFF  0F,FEC
01152:  MOVFF  10,FEC
....................             hafiza[i][0][1]=y1; 
01156:  MOVF   05,W
01158:  MULLW  14
0115A:  MOVF   FF3,W
0115C:  CLRF   x38
0115E:  MOVWF  x37
01160:  MOVLW  04
01162:  ADDWF  x37,W
01164:  MOVWF  01
01166:  MOVLW  00
01168:  ADDWFC x38,W
0116A:  MOVWF  03
0116C:  MOVF   01,W
0116E:  ADDLW  65
01170:  MOVWF  FE9
01172:  MOVLW  00
01174:  ADDWFC 03,W
01176:  MOVWF  FEA
01178:  MOVFF  11,FEF
0117C:  MOVFF  12,FEC
01180:  MOVFF  13,FEC
01184:  MOVFF  14,FEC
....................             hafiza[i][0][2]=y2; 
01188:  MOVF   05,W
0118A:  MULLW  14
0118C:  MOVF   FF3,W
0118E:  CLRF   x38
01190:  MOVWF  x37
01192:  MOVLW  08
01194:  ADDWF  x37,W
01196:  MOVWF  01
01198:  MOVLW  00
0119A:  ADDWFC x38,W
0119C:  MOVWF  03
0119E:  MOVF   01,W
011A0:  ADDLW  65
011A2:  MOVWF  FE9
011A4:  MOVLW  00
011A6:  ADDWFC 03,W
011A8:  MOVWF  FEA
011AA:  MOVFF  15,FEF
011AE:  MOVFF  16,FEC
011B2:  MOVFF  17,FEC
011B6:  MOVFF  18,FEC
....................             hafiza[i][0][3]=y3; 
011BA:  MOVF   05,W
011BC:  MULLW  14
011BE:  MOVF   FF3,W
011C0:  CLRF   x38
011C2:  MOVWF  x37
011C4:  MOVLW  0C
011C6:  ADDWF  x37,W
011C8:  MOVWF  01
011CA:  MOVLW  00
011CC:  ADDWFC x38,W
011CE:  MOVWF  03
011D0:  MOVF   01,W
011D2:  ADDLW  65
011D4:  MOVWF  FE9
011D6:  MOVLW  00
011D8:  ADDWFC 03,W
011DA:  MOVWF  FEA
011DC:  MOVFF  19,FEF
011E0:  MOVFF  1A,FEC
011E4:  MOVFF  1B,FEC
011E8:  MOVFF  1C,FEC
....................             hafiza[i][0][4]=z; 
011EC:  MOVF   05,W
011EE:  MULLW  14
011F0:  MOVF   FF3,W
011F2:  CLRF   x38
011F4:  MOVWF  x37
011F6:  MOVLW  10
011F8:  ADDWF  x37,W
011FA:  MOVWF  01
011FC:  MOVLW  00
011FE:  ADDWFC x38,W
01200:  MOVWF  03
01202:  MOVF   01,W
01204:  ADDLW  65
01206:  MOVWF  FE9
01208:  MOVLW  00
0120A:  ADDWFC 03,W
0120C:  MOVWF  FEA
0120E:  MOVFF  1D,FEF
01212:  MOVFF  1E,FEC
01216:  MOVFF  1F,FEC
0121A:  MOVFF  20,FEC
....................             i=2; 
0121E:  MOVLW  02
01220:  MOVWF  05
....................             delay_ms(200); 
01222:  MOVLW  C8
01224:  MOVWF  x38
01226:  MOVLB  0
01228:  CALL   02C6
0122C:  MOVLB  1
....................          } 
....................       } 
....................        
....................    if(input(PIN_D5) && ply_fl==0) 
0122E:  BTFSS  F83.5
01230:  BRA    1246
01232:  MOVF   07,F
01234:  BNZ   1246
....................    { 
....................       ply_fl=1; 
01236:  MOVLW  01
01238:  MOVWF  07
....................       delay_ms(200); 
0123A:  MOVLW  C8
0123C:  MOVWF  x38
0123E:  MOVLB  0
01240:  CALL   02C6
01244:  MOVLB  1
....................    } 
....................    if(input(PIN_D5) && ply_fl==1) 
01246:  BTFSS  F83.5
01248:  BRA    1262
0124A:  DECFSZ 07,W
0124C:  BRA    1262
....................    { 
....................       clfl_fl = 0; 
0124E:  CLRF   0B
....................       clfl = 0; 
01250:  CLRF   08
....................       ply_fl=0; 
01252:  CLRF   07
....................       reset_fl=0; 
01254:  CLRF   0C
....................       delay_ms(200); 
01256:  MOVLW  C8
01258:  MOVWF  x38
0125A:  MOVLB  0
0125C:  CALL   02C6
01260:  MOVLB  1
....................    } 
....................    if(ply_fl==1) 
01262:  DECFSZ 07,W
01264:  BRA    127E
....................    { 
....................       if(reset_fl==0){ 
01266:  MOVF   0C,F
01268:  BNZ   1272
....................          resetMoves(); 
0126A:  MOVLB  0
0126C:  CALL   02F0
01270:  MOVLB  1
....................       } 
....................       if(reset_fl==1){ 
01272:  DECFSZ 0C,W
01274:  BRA    127E
....................          playMoves(); 
01276:  MOVLB  0
01278:  GOTO   0582
0127C:  MOVLB  1
....................       } 
....................    } 
.................... //......... HOME BUTON 
....................    if(input(PIN_D6) && home_fl==0) 
0127E:  BTFSS  F83.6
01280:  BRA    1296
01282:  MOVF   09,F
01284:  BNZ   1296
....................    { 
....................       home_fl=1; 
01286:  MOVLW  01
01288:  MOVWF  09
....................       delay_ms(200); 
0128A:  MOVLW  C8
0128C:  MOVWF  x38
0128E:  MOVLB  0
01290:  CALL   02C6
01294:  MOVLB  1
....................    } 
....................    if(input(PIN_D6) && home_fl==1) 
01296:  BTFSS  F83.6
01298:  BRA    12AC
0129A:  DECFSZ 09,W
0129C:  BRA    12AC
....................    { 
....................       home_fl=0; 
0129E:  CLRF   09
....................       delay_ms(200); 
012A0:  MOVLW  C8
012A2:  MOVWF  x38
012A4:  MOVLB  0
012A6:  CALL   02C6
012AA:  MOVLB  1
....................    } 
....................    if(home_fl==1) 
012AC:  DECFSZ 09,W
012AE:  BRA    12B6
....................    { 
....................       resetMoves(); 
012B0:  MOVLB  0
012B2:  CALL   02F0
....................    } 
012B6:  MOVLB  F
012B8:  BRA    0D70
....................     
.................... //......... HOME BUTON 
.................... } 
.................... } 
012BA:  SLEEP 

Configuration Fuses:
   Word  1: 2800   INTRC_IO NOPLLEN PRIMARY_ON NOFCMEN NOIESO
   Word  2: 3C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: 3F00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 NOMCLR
   Word  4: 0080   NOSTVREN NOLVP NOXINST NODEBUG
   Word  5: 0000   PROTECT CPB CPD
   Word  6: C000   WRT WRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
